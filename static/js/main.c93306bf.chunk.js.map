{"version":3,"sources":["store/config.js","store/initialState.js","store/actions.js","store/selectors.js","store/utils/mb.js","store/utils/transformers.js","store/reducers.js","store/index.js","components/navigation/aboutContent.jsx","store/middleware.js","components/navigation/navigation.jsx","utilities/styleSpecDiff.js","store/utils/index.js","components/map/tooltip.jsx","components/map/legend.jsx","components/map/map.jsx","components/sidebar/eventsList.jsx","components/sidebar/datetimePicker.jsx","components/sidebar/paginatedEventsList.jsx","components/sidebar/geomPicker.jsx","components/sidebar/intervalPicker.jsx","components/sidebar/resultsTable.jsx","components/sidebar/downloadModal.jsx","components/sidebar/downloadItem.jsx","components/sidebar/downloadList.jsx","components/sidebar/downloader.jsx","components/sidebar/legacy/legacyRealtime.jsx","components/thinking/thinkingOverlay.jsx","components/layout.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["ROOT","window","location","href","EVENTS_API_URL","process","URL_GARRD_GEOJSON","URL_GAUGE_GEOJSON","URL_BASIN_PIXEL_LOOKUP","REQUEST_TIME_INTERVAL","Number","INTERVAL_OPTIONS","RAINFALL_MIN_DATE","RAINFALL_TYPES","SENSOR_TYPES","pixel","gauge","CONTEXT_TYPES","HEADER_LABELS","ts","val","src","id","type","MAP_LAYERS","INDEX","LAYERS_W_MOUSEOVER","LAYERS_W_RESULTS","RAINFALL_COLOR_ARRAY","BREAKS_050","LEGEND_BREAKS","initialState","progress","tab","mapLoaded","initialStyleLoaded","isFetching","isThinking","messages","fetchKwargs","active","startDt","endDt","sensorLocations","basin","rollup","zerofill","f","history","rainfallEvents","list","stats","latest","longest","maxDate","minDate","filters","maxHours","refData","initMap","token","latitude","longitude","zoom","mapboxSources","url","sourcesToAdd","layersToAdd","attribution","mapStyle","mapLegend","createAction","setStyle","addLayers","switchTab","asyncAction","asyncActionSuccess","asyncActionFail","startThinking","stopThinking","calcEventStats","pickRainfallEvent","pickRainfallDateTimeRange","pickSensor","pickInterval","pickActiveResultItem","requestRainfallData","requestRainfallDataSuccess","requestRainfallDataFail","filterEventByHours","highlightSensor","applyColorStretch","setLayerStyle","buildLayerStyle","resetLayerSrcs","setState","selectContext","state","selectFetchKwargs","contextType","selectFetchHistory","selectActiveFetchHistoryItem","selectActiveFetchHistory","find","i","isActive","selectFetchHistoryItemById","requestId","selectPickedSensors","sensorLocationType","v","undefined","selectLyrSrcByName","name","sources","selectLyrSrcs","selectLayers","layers","selectLayersByIds","layerIds","filter","lyr","includes","selectMapStyleSourceDataFeatures","has","data","features","selectPixelLookupsBasinsOnly","basins","basinPixelLookup","keys","k","map","value","pixels","selectRainfallEvents","selectLatestTimestamps","selectLatestlegacyGaugeTS","selectLatestlegacyGarrTS","minmaxTableAttr","table","attr","values","row","maxValue","Math","max","minValue","min","maxRank","length","buildColorStyleExpression","joinField","chromaScaleStr","chromaColorMode","breaks","method","minMax","chromaObj","chroma","mode","styleExp","heightExp","breakPoints","colors","console","log","slice","forEach","t","color","classes","hex","push","b","indexOf","d","brighten","saturate","height","legendContent","content","zip","transformRainfallPixelsToMapboxSourceObject","geojson","properties","toString","label","total","geometry","transformRainfallGaugesToMapboxSourceObject","props","dwid","transformDataApiEventsJSON","eventsJson","e","start_dt","end_dt","hours","duration","selected","eventid","event_label","rootReducer","createReducer","action","payload","pathArray","keepACopy","set","refPatharray","eventsData","eventLatest","sort","moment","endOf","format","fk","rainfallEvent","selectEvent","selectEventInverse","selectedOptions","opt","pixelIds","status","currentFetch","results","processedKwargs","selectFetchHistoryItemsById","fetchItem","contextData","found","selectAnyFetchHistoryItemById","selectFetchHistoryItemsByIdInverse","sensor","gj","cloneDeep","gjForMap","onGeojsonProp","onTableProp","dropFeatures","newFeatures","feature","new_props","a2","get","joinTabletoGeojson","s","cleanGeojson","lyrSrcNames","lyrSrcName","eventFilters","splice","path","how","existing","fetchHistoryItem","sensors","allResults","concat","minmax","symbology","sensorsToStyle","sensorsToUnStyle","st","lyrIdsToStyle","paint","lyrIdsToNotStyle","chromaScaleObj","colorFx","domain","colorExp","brk","clr","buildRainfallColorStyleExp","lyrId","layerId","selectLayerById","store","configureStore","reducer","devTools","how2","AboutContent","Tabs","defaultActiveKey","variant","mountOnEnter","Tab","eventKey","title","className","children","class","allow","allowfullscreen","fetchJSON","dispatch","transformer","axios","then","response","error","finally","join","initDataFetch","Promise","all","resolve","reject","promiseFetchReferenceDatasets","r","subtract","toISOString","maxDateLegacyGauge","getState","maxDateLegacyGarr","fetchRainfallDataFromApiV2","rainfallDataType","kwargs","MD5","matchingRequest","requestParams","_fetchRainfallDataFromApiV2","params","requestKwargs","meta","jobId","setTimeout","jobUrl","reduce","totalValue","currentValue","transformRainfallResults","args","catch","pickDownload","switchContext","fhi","Navigation","context","handleShow","bind","handleClose","show","showWhich","AboutButton","Row","Col","lg","placeholder","alt","this","target","Navbar","bg","expand","Brand","style","fontSize","Toggle","aria-controls","Collapse","Nav","Item","Link","onSelect","onClick","Modal","onHide","size","Header","closeButton","Title","Body","Footer","Button","Component","mapDispatchToProps","connect","operations","addSource","sourceId","after","commands","command","removeSource","sourcesRemoved","updateSource","canUpdateGeoJSON","before","prop","hasOwnProperty","isEqual","diffLayerPropertyChanges","klass","pluckId","layer","indexById","group","diffStyles","version","center","bearing","pitch","sprite","glyphs","transition","light","removeOrAddSourceCommands","diffSources","beforeLayers","source","beforeLayer","afterLayer","insertBeforeLayerId","beforeOrder","afterOrder","beforeIndex","afterIndex","tracker","clean","Object","create","lastIndexOf","layout","minzoom","maxzoom","diffLayers","warn","pluralize","singular","plural","Tooltip","Card","ListGroup","p","key","round","toFixed","MapLegend","handleSelectLegend","dispatchPickLegend","currentTarget","sm","Form","Check","custom","onChange","defaultChecked","Table","bins","bi","backgroundColor","React","isEmpty","c","luminance","ownProps","LAYERS_W_SELECT","ReactMap","loadingMap","loadMap","nextProps","updateMapStyle","ReactDOM","render","createElement","tooltipContainer","unmountComponentAtNode","tooltip","webmap","queryRenderedFeatures","point","setLngLat","lngLat","getCanvas","cursor","setTooltip","bbox","x","y","makeChoiceOnMapClick","mapConfig","container","attributionControl","mapboxgl","accessToken","Map","document","Marker","offset","addTo","on","addControl","MapboxGeocoder","marker","collapsed","clearAndBlurOnEsc","clearOnBlur","countries","NavigationControl","AttributionControl","compact","customAttribution","sourceName","sourceData","layerStyles","layerStyle","addLayer","addLayerStylesAbove","getStyle","loaded","initFetchData","handleMapClick","hoveredStateId","lyrRef","lyrName","lyrSrc","makeTooltipOnHover","setFeatureState","hover","nextPropsMapStyle","thisMap","oldStyle","Immutable","fromJS","newStyle","is","changes","toJS","change","getSource","setData","apply","sensorFeature","pickSensorFromMap","EventsList","handleListClick","dispatchPickRainfallEvent","events","dt0","dt1","pct","xs","ProgressBar","now","parseFloat","DateTimePicker","baseURL","handleOnApply","dispatchPickRainfallDateTimeRange","startDate","endDate","noGutters","InputGroup","FormControl","plaintext","readOnly","aria-label","Append","timePicker","timePickerIncrement","showDropdowns","ranges","alwaysShowCalendars","onApply","icon","faCalendarAlt","faList","Spinner","animation","currentKwargs","startOf","local","minYear","year","maxYear","GeodataPicker","handleSelectGauge","selectedGauges","dispatchPickSensorParam","handleSelectBasin","selectedBasin","gaugeCount","pixelCount","md","isMulti","options","raingaugeOpts","menuPortalTarget","body","isClearable","Badge","pill","basinOpts","selectedPixels","selectedRainGauges","selectedRaingauges","IntervalPicker","handleSelectInterval","dispatchPickInterval","inline","ResultsTable","rows","header","responsive","striped","bordered","h","ih","ir","DownloadModal","handleDownloadClick","preventDefault","blob","Blob","csv","saveAs","autoBom","gauges","dialogClassName","g","block","resultsTableData","allRows","sr","srd","unparse","DownloadsItem","dispatchPickDownload","hasResults","pKwargs","failedJob","m","Alert","dismissible","DownloadsList","fh","fetchHistory","reverse","idx","listColor","as","rainfallSensorType","hasDownloads","RainfallDownloader","fetchRainfallData","disabled","hasKwargs","selectedSensors","sensorType","selectSelectedSensors","downloadHistory","popover","Popover","Content","LegacyRealtimeRainfallPage","OverlayTrigger","trigger","placement","overlay","ThinkingOverlay","isAppThinking","faSpinner","pulse","faCloudRain","transform","message","msgs","Layout","styleUrl","styleId","Container","TabContent","TabPane","rainfallSensorTypes","App","TabContainer","isloading","loading","Boolean","hostname","match","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c93306bf.chunk.js","sourcesContent":["/**\r\n * config.js\r\n * contains constants and derived variables required on application initializations. \r\n * Some of these is used in the initial state tree, others are imported by \r\n * components by middleware\r\n */\r\n\r\n\r\n\r\n// Seed data --------------------------------------------\r\n// import RAINFALL_EVENTS from '../data/events.json'\r\nexport const ROOT = window.location.href\r\n\r\n\r\n// Mapbox constants -------------------------------------\r\nexport const MAPBOX_TOKEN = process.env.REACT_APP_MAPBOX_TOKEN\r\nexport const MAPBOX_STYLE_BASEMAP = process.env.REACT_APP_MAPBOX_STYLE_BASEMAP\r\n\r\n// Service URLs -----------------------------------------\r\nexport const EVENTS_JSON_URL = ROOT + \"static/data/events.json\"\r\nexport const EVENTS_API_URL = process.env.REACT_APP_API_URL_ROOT + \"rainfall-events/?format=json\"\r\nexport const TIMESTAMPS_API_URL = process.env.REACT_APP_API_URL_ROOT + \"v2/latest-observations/?format=json\"\r\nexport const URL_GARRD_GEOJSON = ROOT + \"static/data/pixels.geojson\"\r\nexport const URL_GAUGE_GEOJSON = ROOT + \"static/data/gauges.geojson\"\r\nexport const URL_BASIN_PIXEL_LOOKUP = ROOT + \"static/data/basin-lookup-pixel.json\"\r\n\r\n// Service Parms -----------------------------------------\r\n// export const REQUEST_TIME_INTERVAL = 2000\r\nexport const REQUEST_TIME_INTERVAL = Number(process.env.REACT_APP_API_REQUEST_INTERVAL_MS)\r\n\r\n\r\n// rainfall data constants ----------------------------------\r\n\r\nexport const INTERVAL_OPTIONS = [\r\n  \"15-minute\",\r\n  \"Hourly\",\r\n  \"Daily\",\r\n  \"Total\"\r\n]\r\n\r\n// the earliest date that can be selected:\r\nexport const RAINFALL_MIN_DATE = `${process.env.REACT_APP_RAINFALL_MIN_DATE}`\r\n\r\n// the types of rainfall data that can be queried\r\nexport const RAINFALL_TYPES = {\r\n  historic: \"historic\",\r\n  realtime: \"realtime\"\r\n}\r\n\r\nexport const SENSOR_TYPES = {\r\n  pixel: \"pixel\",\r\n  gauge: \"gauge\",\r\n}\r\n\r\nexport const CONTEXT_TYPES = {\r\n  legacyRealtime: \"legacyRealtime\",\r\n  legacyGauge: \"legacyGauge\",\r\n  legacyGarr: \"legacyGarr\",\r\n  makeItRain: \"makeItRain\"\r\n}\r\n\r\nexport const HEADER_LABELS = {\r\n  ts: \"timestamp\",\r\n  val: \"rainfall\",\r\n  src: \"source\",\r\n  id: \"sensor id\",\r\n  type: \"sensor type\"\r\n}\r\n\r\n// rainfall layers + styles (mapbox style spec)\r\n\r\nexport const LYR_HOVER_PREFIX = 'HOVER'\r\nexport const LYR_HIGHLIGHT_PREFIX = 'HIGHLIGHT'\r\n\r\n// Default Operational Layers + Styles --------------------\r\n// These are layer definitions per the Mapbox style-spec, with one exception: the INDEX property. \r\n// When INDEX is used with the `addLayers` reducer, the layer will be inserted at that position \r\n// in the style sheet, so that it renders in the correct order with the basemap elements\r\nexport const MAP_LAYERS = [\r\n  {\r\n    INDEX: 69,\r\n    'id': `pixel-results`,\r\n    'type': 'fill',\r\n    'source': 'pixel',\r\n    'layout': {},\r\n    'paint': {\r\n      'fill-color': [\r\n        \"match\",\r\n        [\"get\", \"total\"],\r\n        \"\",\r\n        \"#fff\",\r\n        [\r\n          \"interpolate\",\r\n          [\"linear\"],\r\n          [\"get\", \"total\"],\r\n          0,\r\n          '#fafa6e',\r\n          10,\r\n          '#2A4858',\r\n        ]\r\n      ],\r\n      'fill-opacity': [\r\n        \"match\",\r\n        [\"get\", \"total\"],\r\n        \"\",\r\n        0,\r\n        0.8\r\n      ]\r\n    }\r\n  },\r\n  {\r\n    INDEX: 70,\r\n    'id': `${LYR_HOVER_PREFIX}-pixel`,\r\n    'type': 'fill',\r\n    'source': 'pixel',\r\n    'layout': {},\r\n    'paint': {\r\n      'fill-color': '#2196f3',\r\n      'fill-opacity': [\r\n        'case',\r\n        ['boolean', ['feature-state', 'hover'], false],\r\n        0.25,\r\n        0\r\n      ]\r\n    }\r\n  },\r\n  {\r\n    INDEX: 71,\r\n    \"id\": `${LYR_HOVER_PREFIX}-gauge-halo`,\r\n    \"type\": \"circle\",\r\n    \"source\": `gauge`,\r\n    'layout': {},\r\n    \"paint\": {\r\n      \"circle-radius\": 20,\r\n      \"circle-color\": \"#2196f3\",\r\n      \"circle-blur\": 0.8,\r\n      \"circle-opacity\": [\r\n        'case',\r\n        ['boolean', ['feature-state', 'hover'], false],\r\n        0.8,\r\n        0\r\n      ],\r\n    }\r\n  },\r\n  {\r\n    INDEX: 72,\r\n    \"id\": `${LYR_HOVER_PREFIX}-gauge`,\r\n    \"type\": \"circle\",\r\n    \"source\": `gauge`,\r\n    \"layout\": {},\r\n    \"paint\": {\r\n      \"circle-radius\": [\r\n        'interpolate',\r\n        ['linear'],\r\n        ['zoom'],\r\n        7,\r\n        6,\r\n        18,\r\n        12\r\n      ],\r\n      \"circle-color\": \"hsl(209, 25%, 55%)\",\r\n      \"circle-stroke-color\": \"#fff\",\r\n      \"circle-stroke-width\": 2,\r\n      \"circle-opacity\": [\r\n        'case',\r\n        ['boolean', ['feature-state', 'hover'], false],\r\n        1,\r\n        0\r\n      ],\r\n      \"circle-stroke-opacity\": [\r\n        'case',\r\n        ['boolean', ['feature-state', 'hover'], false],\r\n        1,\r\n        0\r\n      ]\r\n    }\r\n  },\r\n\r\n  // {\r\n  //   INDEX: 69,\r\n  //   'id': `pixel-results-3d`,\r\n  //   'type': 'fill-extrusion',\r\n  //   'source': 'pixel',\r\n  //   'layout': {},\r\n  //   'paint': {\r\n  //     'fill-extrusion-base': 0,\r\n  //     'fill-extrusion-color': '#fff',\r\n  //     'fill-extrusion-opacity': 0.9, \r\n  //     // 'fill-extrusion-translate': [\r\n  //     //   \"match\",\r\n  //     //   [\"get\", \"total\"],\r\n  //     //   \"\",\r\n  //     //   [0, -10],\r\n  //     //   [0, 0]\r\n  //     // ]\r\n  //   }\r\n  // },    \r\n  {\r\n    // INDEX: 73,\r\n    'id': `gauge-results`,\r\n    \"type\": \"circle\",\r\n    \"source\": `gauge`,\r\n    'layout': {},\r\n    \"paint\": {\r\n      \"circle-radius\": [\r\n        'interpolate',\r\n        ['linear'],\r\n        ['zoom'],\r\n        7,\r\n        8,\r\n        18,\r\n        14\r\n      ],\r\n      \"circle-stroke-color\": \"#fff\",\r\n      \"circle-stroke-width\": 2,      \r\n      'circle-color': [\r\n        \"match\",\r\n        [\"get\", \"total\"],\r\n        \"\",\r\n        \"#fff\",\r\n        [\r\n          \"interpolate\",\r\n          [\"linear\"],\r\n          [\"get\", \"total\"],\r\n          0,\r\n          '#fafa6e',\r\n          10,\r\n          '#2A4858',\r\n        ]\r\n      ],\r\n      'circle-opacity': [\r\n        \"match\",\r\n        [\"get\", \"total\"],\r\n        \"\",\r\n        0,\r\n        1\r\n      ],\r\n      'circle-stroke-opacity': [\r\n        \"match\",\r\n        [\"get\", \"total\"],\r\n        \"\",\r\n        0,\r\n        1\r\n      ]      \r\n    }\r\n  },\r\n]\r\n\r\nexport const LAYERS_W_MOUSEOVER = [\r\n  [`${LYR_HOVER_PREFIX}-pixel`, 'pixel'],\r\n  [`${LYR_HOVER_PREFIX}-gauge`, 'gauge'],\r\n  [`${LYR_HOVER_PREFIX}-gauge-halo`, 'gauge']\r\n]\r\n\r\nexport const LAYERS_W_RESULTS = [\r\n  'pixel-results',\r\n  'gauge-results',\r\n  // 'pixel-results-3d',\r\n]\r\n\r\nexport const symbolBinLookup = {\r\n  'q': 'Quantile',\r\n  'e': 'Equal Interval',\r\n  'l': 'Linear',\r\n}\r\n\r\nexport const RAINFALL_COLOR_ARRAY = [\"#fde725\", \"#5dc962\" ,\"#20908d\", \"#3a528b\", \"#440154\"]\r\nexport const RAINFALL_COLOR_MODE = 'lch'\r\nexport const RAINFALL_BREAK_COUNT = 7\r\n\r\n\r\n\r\nexport const BREAKS_005 = [\r\n  0.01,\r\n  0.02,\r\n  0.04,\r\n  0.06,\r\n  0.08,\r\n  0.10,\r\n  0.12,\r\n  0.15,\r\n  0.20,\r\n  0.25,\r\n  0.30,\r\n  0.35,\r\n  0.40,\r\n  0.45,\r\n  0.50\r\n]\r\n\r\nexport const BREAKS_050 = [\r\n  0.1,\r\n  0.2,\r\n  0.4,\r\n  0.6,\r\n  0.8,\r\n  1.0,\r\n  1.5,\r\n  2.0,\r\n  2.5,\r\n  3.0,\r\n  3.5,\r\n  4.0,\r\n  4.5,\r\n  5.0\r\n]\r\n\r\nexport const BREAKS_100 = [\r\n  0.2,\r\n  0.4,\r\n  0.8,\r\n  1.0,\r\n  1.2,\r\n  1.6,\r\n  2.0,\r\n  2.4,\r\n  3.0,\r\n  4.0,\r\n  5.0,\r\n  6.0,\r\n  7.0,\r\n  8.0,\r\n  9.0,\r\n  10\r\n]\r\n\r\n\r\nexport const LEGEND_BREAKS = {\r\n  \"breaks_005\": BREAKS_005,\r\n  \"breaks_050\": BREAKS_050,\r\n  \"breaks_100\": BREAKS_100\r\n}","import {\r\n  MAPBOX_TOKEN,\r\n  MAPBOX_STYLE_BASEMAP,\r\n  RAINFALL_MIN_DATE,\r\n  CONTEXT_TYPES\r\n} from './config'\r\n\r\n// import { testFetchHistoryItems } from './data/test_events'\r\n\r\nexport const initialState = {\r\n  // progress ---------------------------------------------\r\n  // for storing indicators of global application state\r\n  progress: {\r\n    tab: CONTEXT_TYPES.legacyRealtime,\r\n    mapLoaded: false,\r\n    initialStyleLoaded: false,\r\n    isFetching: true,\r\n    // isThinking increments decrements with calls to start/stopThinking. E.g: \r\n    // Set at +1 so we're \"thinking\" on load, then after all start up tasks \r\n    // complete, -1 to get back to zero.\r\n    isThinking: 0,\r\n    messages: []\r\n  },\r\n  // fetchKwargs ------------------------------------------\r\n  // Holds arguments for calling the API, e.g., sensor type, rollup, zerofill.\r\n  // Keys correspond to tabs in the UI, and each tab has both an active and history\r\n  // object for storing current parameters and past requests, respectively.\r\n  fetchKwargs: {\r\n    [CONTEXT_TYPES.legacyRealtime] : {\r\n      active: {\r\n        startDt: null,\r\n        endDt: null,\r\n        sensorLocations: {\r\n          gauge: [],\r\n          basin: [],\r\n          pixel: []\r\n        },\r\n        rollup: \"Total\",\r\n        zerofill: true,\r\n        f: 'sensor'\r\n      },\r\n      history: []\r\n    },\r\n    [CONTEXT_TYPES.legacyGauge] : {\r\n      active: {\r\n        startDt: null,\r\n        endDt: null,\r\n        sensorLocations: {\r\n          gauge: [],\r\n          basin: [],\r\n          pixel: []\r\n        },\r\n        rollup: \"Total\",\r\n        zerofill: true,\r\n        f: 'sensor'\r\n      },\r\n      // history: testFetchHistoryItems\r\n      history: []\r\n    },\r\n    [CONTEXT_TYPES.legacyGarr] : {\r\n      active: {\r\n        startDt: null,\r\n        endDt: null,\r\n        sensorLocations: {\r\n          gauge: [],\r\n          basin: [],\r\n          pixel: []\r\n        },\r\n        rollup: \"Total\",\r\n        zerofill: true,\r\n        f: 'sensor'\r\n      },\r\n      history: []\r\n    }       \r\n  },\r\n  // EVENTS -----------------------------------------------  \r\n  rainfallEvents: {\r\n    // list of rainfall events; populated via an async call to the API at load time.\r\n    list: [],\r\n    // maxDateTime stores the max datetime found in the events array. It's eval'd an on-app load and \r\n    // used to set limits on selectable datetimes for the historic data\r\n    stats: {\r\n      latest: null,\r\n      longest: null,\r\n      maxDate: null,\r\n      minDate: RAINFALL_MIN_DATE\r\n    },\r\n    // eventFilters stores any filter conditions used to filter the list of events\r\n    filters: {\r\n      maxHours: 24,\r\n      // minHours: 0,\r\n      // year: 2019,\r\n      // month: null\r\n    },    \r\n  },\r\n  // EVENTS -----------------------------------------------\r\n  stats: {\r\n    latest: {}\r\n  },\r\n  // refData --------------------------------------------------\r\n  // reference data\r\n  refData: {},\r\n  // MAP --------------------------------------------------\r\n  // initMap provides *initial* values fed into the MapboxGL map object.\r\n  initMap: {\r\n    token: MAPBOX_TOKEN,\r\n    latitude: 40.4481524,\r\n    longitude: -79.9864242,\r\n    zoom: 10,\r\n    mapboxSources: {\r\n      \"3rww-rainfall-base\": {\r\n        type: \"vector\",\r\n        url: MAPBOX_STYLE_BASEMAP\r\n      }\r\n    },\r\n    sourcesToAdd: [],\r\n    layersToAdd: [],\r\n    attribution: '<a href=\"https://www.3riverswetweather.org\" target=\"_blank\">3RWW</a>, <a href=\"https://www.civicmapper.com\" target=\"_blank\">CivicMapper</a>.',\r\n  },\r\n  // mapStyle is where the MapboxGL map's style sheet is stored; changes here change the map\r\n  // note that we're pre-populating some expected objects\r\n  mapStyle: {},\r\n  // mapLegend stores the breaks and colors used to render the map legend.\r\n  mapLegend: {}\r\n} ","import {createAction} from '@reduxjs/toolkit';\r\n\r\n// --------------------------------------------------------\r\n// Map State\r\nexport const mapLoaded = createAction('MAP_LOADED')\r\nexport const setStyle = createAction('SET_STYLE')\r\nexport const addLayers = createAction('LOAD_REF_LAYERS')\r\n\r\n// --------------------------------------------------------\r\n// Context\r\nexport const switchTab = createAction('SWITCH_TAB')\r\n\r\n// --------------------------------------------------------\r\n// Feedback\r\nexport const asyncAction = createAction('ASYNC_START')\r\nexport const asyncActionSuccess = createAction('ASYNC_SUCCESS')\r\nexport const asyncActionFail = createAction('ASYNC_FAIL')\r\n\r\nexport const isFetching = createAction('FETCHING')\r\nexport const startThinking = createAction('THINKING_1')\r\nexport const stopThinking = createAction('THINKING_0')\r\n\r\n// --------------------------------------------------------\r\n// Rainfall data retrieval parameters \r\n\r\nexport const calcEventStats = createAction('CALC_EVENT_STATS')\r\n// get rainfall date/times and metadata for an event\r\nexport const pickRainfallEvent = createAction('PICK_EVENT')\r\n// pick date/time range for rainfall\r\nexport const pickRainfallDateTimeRange = createAction('PICK_DATETIME_RANGE')\r\n// pick a sensor (or param used to select sensors, e.g., basins)\r\nexport const pickSensor = createAction('PICK_SENSOR')\r\n// pick the interval\r\nexport const pickInterval = createAction('PICK_INTERVAL')\r\n// set the active result (used for displaying results on the map)\r\nexport const pickActiveResultItem = createAction('PICK_ACTIVE_RESULT')\r\n\r\n// --------------------------------------------------------\r\n// Rainfall data retrieval \r\n\r\n// rainfall data request status, successfully, received, or failed\r\nexport const requestRainfallData = createAction('GETTING_RAINFALL')\r\nexport const requestRainfallDataInvalid = createAction('GETTING_RAINFALL_INVALID')\r\nexport const requestRainfallDataSuccess = createAction('GETTING_RAINFALL_SUCCESS')\r\nexport const requestRainfallDataFail = createAction('GETTING_RAINFALL_FAIL')\r\n\r\n// filter rainfall events\r\nexport const filterEventByHours = createAction('FILTER_EVENT_BY_HOUR')\r\n\r\n// --------------------------------------------------------\r\n// Rainfall data symbology and interactivity\r\nexport const highlightSensor = createAction('HIGHLIGHT_SENSOR')\r\nexport const applyColorStretch = createAction('APPLY_COLOR_STRETCH')\r\nexport const setLayerStyle = createAction('SET_LAYER_STYLE')\r\nexport const buildLayerStyle = createAction('BUILD_LAYER_STYLE')\r\nexport const resetLayerSrcs = createAction('RESET_LAYER_SRCS')\r\n\r\n// --------------------------------------------------------\r\n// Map Animation \r\nexport const startRainfallAnimation = createAction('START_ANIMATION')\r\nexport const stopRainfallAnimation = createAction('STOP_ANIMATION')\r\nexport const restartRainfallAnimation = createAction('RESTART_ANIMATION')\r\n// export const fasterRainfallAnimation = createAction('SPEED_UP_ANIMATION')\r\n// export const slowerRainfallAnimation = createAction('SLOW_DOWN_ANIMATION')\r\n\r\n\r\n// --------------------------------------------------------\r\n// misc\r\nexport const setState = createAction('SET_STATE')","import { has, isEmpty, keys, forEach, includes, startsWith } from 'lodash-es'\r\n\r\nimport { LYR_HIGHLIGHT_PREFIX } from './config'\r\n\r\n// ----------------------------------------------\r\n// selecting UI State\r\n\r\nexport const selectContext = (state) => state.progress.tab\r\n\r\n// ----------------------------------------------\r\n// selecting rainfall data request parameters and history\r\n\r\nexport const selectFetchKwargs = (state, contextType) => (\r\n  state.fetchKwargs[contextType].active\r\n)\r\n\r\nexport const selectActiveFetchKwargs = (state) => (\r\n  state.fetchKwargs[selectContext(state)].active\r\n)\r\n\r\nexport const selectSelectedSensors = (state, contextType) => {\r\n  let selectedSensors = {}\r\n  forEach(\r\n    selectFetchKwargs(state, contextType).sensorLocations, \r\n    (sensors, sensorType) => {\r\n      if (sensors.length > 0) {\r\n        selectedSensors[sensorType] = sensors\r\n      }\r\n    }\r\n  )\r\n  return selectedSensors\r\n}\r\n\r\nexport const selectFetchHistory = (state, contextType) => {\r\n  return state.fetchKwargs[contextType].history\r\n}\r\n\r\nexport const selectActiveFetchHistory = (state) => (\r\n  state.fetchKwargs[selectContext(state)].history\r\n)\r\n\r\nexport const selectActiveFetchHistoryItem = (state) => (\r\n  selectActiveFetchHistory(state).find(i => i.isActive === true)\r\n)\r\n\r\nexport const selectFetchHistoryItemById = (state, requestId, contextType) => {\r\n  // console.log(requestId, contextType)\r\n  let r = selectFetchHistory(state, contextType).find(f => f.requestId == requestId)\r\n  // console.log(r)\r\n  return r\r\n}\r\n\r\nexport const selectFetchHistoryItemsById = (state, requestId, contextType) => (\r\n  selectFetchHistory(state, contextType)\r\n    .filter(f => f.requestId == requestId)\r\n)\r\n\r\nexport const selectFetchHistoryItemsByIdInverse = (state, requestId, contextType) => (\r\n  selectFetchHistory(state, contextType)\r\n    .filter(f => f.requestId !== requestId)\r\n)\r\n\r\nexport const selectAnyFetchHistoryItemById = (state, requestId) => {\r\n  let i;\r\n  forEach(state.fetchKwargs, (contextData, contextType) => {\r\n    let found = contextData.history.find(f => f.requestId == requestId)\r\n    if (found !== undefined) { i = found }\r\n  })\r\n  return i\r\n}\r\n\r\nexport const selectAnyFetchHistoryItemsById = (state, requestId) => {\r\n  let i = [];\r\n  forEach(state.fetchKwargs, (contextData, contextType) => {\r\n    i = i.concat(contextData.history.filter(f => f.requestId == requestId))\r\n  })\r\n  return i\r\n}\r\n\r\nexport const selectAnyFetchHistoryItemsByIdInverse = (state, requestId) => {\r\n  let i = [];\r\n  forEach(state.fetchKwargs, (contextData, contextType) => {\r\n    i = i.concat(contextData.history.filter(f => f.requestId !== requestId))\r\n  })\r\n  return i\r\n}\r\n\r\n// select all/any active fetch history items across contexts\r\nexport const selectAnyActiveFetchHistoryItems = (state) => {\r\n  let i = [];\r\n  forEach(state.fetchKwargs, (contextData, contextType) => {\r\n    i = i.concat(contextData.history.filter(f => f.isActive == true))\r\n  })\r\n}\r\n\r\nexport const selectPickedSensors = (state, contextType, sensorLocationType) => {\r\n  let v = state.fetchKwargs[contextType].active.sensorLocations[sensorLocationType]\r\n  if (v === undefined) {\r\n    return []\r\n  }\r\n  return v\r\n}\r\n\r\nexport const selectAnyActiveFetches = (state) => {\r\n  let i;\r\n  forEach(state.fetchKwargs, (contextData, contextType) => {\r\n    i = i.concat(contextData.history.filter(f => f.isFetching))\r\n  })\r\n  return i\r\n}\r\n\r\n// ----------------------------------------------\r\n// selecting from the Mapbox style sheet object \r\n// and supporting geodata\r\n\r\n/** -------------------------------------------------------\r\n * selections for the Mapbox style-spec state object\r\n */\r\n\r\n export const selectLyrSrcs = (state) => state.mapStyle.sources\r\n\r\n export const selectLyrSrcByName = (state, name) => selectLyrSrcs(state)[name]\r\n\r\n// the mapStyle object in the store provides layer state for the map\r\nexport const selectLayers = (state) => state.mapStyle.layers\r\n\r\n// select a map layer by its ID\r\nexport const selectLayerById = (state, layerId) => {\r\n  return selectLayers(state).find(lyr => lyr.id === layerId)\r\n}\r\n\r\n// select multiple map layers by multiple IDs\r\nexport const selectLayersByIds = (state, layerIds) => {\r\n  // let allLayers = selectLayers(state)\r\n  // console.log(allLayers)\r\n  return selectLayers(state).filter(lyr => includes(layerIds, lyr.id))\r\n}\r\n\r\n// select a map layers using an ID\r\nexport const selectLayersByStartsWithId = (state, layerId) => {\r\n  const mapLayers = selectLayers(state)\r\n  const matchingLayers = []\r\n  mapLayers.forEach(lyr => {\r\n    if (startsWith(lyr.id, layerId)) {\r\n      matchingLayers.push(lyr)\r\n    }\r\n  })\r\n  return matchingLayers\r\n}\r\n\r\n// get all map layers currently added to the map's style\r\n// that are prefixed with \"HIGHLIGHT-\"\r\nexport const selectAllHighlightLayers = (state) => {\r\n  return selectLayers(state).filter((lyr) => startsWith(lyr.id, LYR_HIGHLIGHT_PREFIX))\r\n}\r\n\r\nexport const selectMapStyleSourceDataFeatures = (state, name) => {\r\n  if (has(state.mapStyle, ['sources', name, 'data', 'features'])) {\r\n    return state.mapStyle.sources[name].data.features\r\n  }\r\n  return []\r\n}\r\n\r\nexport const selectMapStyleSourceDataIDs = (state, name) => {\r\n  let srcData = selectMapStyleSourceDataFeatures(state, name)\r\n  if (!isEmpty(srcData)) {\r\n    return srcData.features.map(f => f.id)\r\n  }\r\n  return []\r\n}\r\n\r\nexport const selectPixelLookupsBasinsOnly = (state) => {\r\n  if (has(state, ['refData', 'basinPixelLookup'])) {\r\n    let basins = state.refData.basinPixelLookup\r\n    return keys(basins)\r\n      .filter(k => k !== \"other\")\r\n      .map(k => ({ value: k, pixels: basins[k] }))\r\n  } else {\r\n    return []\r\n  }\r\n}\r\n\r\n// export const selectPixelsForBasin = (state, basin) => {\r\n//   if (has(state, ['refData', 'basinPixelLookup'])) {\r\n//     return state.refData.basinPixelLookup[basin]\r\n//   } else {\r\n//     return []\r\n//   }\r\n// }\r\n\r\n// ----------------------------------------------\r\n// selecting rainfall events data\r\n\r\nexport const selectRainfallEvents = (state) => state.rainfallEvents\r\n\r\nexport const selectEvent = (state, eventid) => (\r\n  selectRainfallEvents(state).list.find((e) => e.eventid === eventid)\r\n)\r\n\r\nexport const selectEventInverse = (state, eventid) => (\r\n  selectRainfallEvents(state).list.filter((e) => e.eventid !== eventid)\r\n)\r\n\r\nexport const selectSelectedEvent = (state) => (\r\n  selectRainfallEvents(state).list.find(e => e.selected)\r\n)\r\n\r\nexport const eventIsSelected = (state) => {\r\n  const s = selectSelectedEvent(state)\r\n  if (s === undefined) { return false }\r\n  if (\r\n    (s.startDt !== null && s.startDt !== undefined)\r\n    &&\r\n    (s.endDt !== null && s.endDt !== undefined)\r\n  ) {\r\n    return true\r\n  }\r\n  return false\r\n}\r\n\r\nexport const selectEventStats = (state) => state.rainfallEvents.stats\r\n\r\nexport const selectLatestTimestamps = (state) => state.stats.latest\r\n\r\nexport const selectLatestlegacyGaugeTS = (state) => selectLatestTimestamps(state)['calibrated-gauge']\r\n\r\nexport const selectLatestlegacyGarrTS = (state) => selectLatestTimestamps(state)['calibrated-radar']","import * as chroma from 'chroma-js'\r\nimport { zip, mean } from 'lodash-es'\r\nimport { \r\n    BREAKS_050,\r\n    RAINFALL_COLOR_ARRAY,\r\n    RAINFALL_COLOR_MODE\r\n} from '../config'\r\n\r\n\r\nexport const minmaxTableAttr = (table, attr) => {\r\n    let values = table\r\n      .map(row => row[attr])\r\n      .filter(v => v >= 0)\r\n  \r\n    return {\r\n      maxValue: Math.max(...values),\r\n      minValue: Math.min(...values),\r\n      maxRank: values.length\r\n    }\r\n  \r\n  }\r\n\r\n\r\n  /**\r\n   * Detects color stored as hex value, and turns it into a light-dark-scale for use with chroma-scale\r\n   * If the the color provided is not hex, it is returned as is.\r\n   */\r\n  export const colorToScale = (colorStr) => {\r\n    if (colorStr.startsWith(\"#\")) {\r\n      return [\r\n        chroma(colorStr).brighten(3).hex(),\r\n        colorStr,\r\n        chroma(colorStr).darken(3).hex()\r\n      ]\r\n    } else {\r\n      return colorStr\r\n    }\r\n  \r\n  }\r\n\r\n\r\nexport const buildRainfallColorStyleExp = (attr, breaks, chromaScaleObj, colors, mode, method) => {\r\n\r\n    if (breaks === undefined) {\r\n      breaks = BREAKS_050\r\n    }\r\n  \r\n    if (attr === undefined) {\r\n      attr = 'total'\r\n    }  \r\n  \r\n    if (colors === undefined) {\r\n      colors = RAINFALL_COLOR_ARRAY\r\n    }\r\n  \r\n    if (mode === undefined) {\r\n      mode = RAINFALL_COLOR_MODE\r\n    }\r\n  \r\n    let colorFx\r\n    if (chromaScaleObj === undefined) {\r\n      colorFx = chroma.scale(colors).mode(mode).domain([0, Math.max(...breaks)])\r\n    } else {\r\n      colorFx = chromaScaleObj.domain([0, Math.max(...breaks)]).classes(breaks)\r\n    }\r\n  \r\n    if (method === undefined) {\r\n      method = 'linear'\r\n    }\r\n    \r\n    let colorExp = [\r\n      \"interpolate\",\r\n      [method],\r\n      [\"get\", attr]\r\n    ]\r\n    let legendContent = []\r\n  \r\n    breaks.forEach(brk => {\r\n      var clr = colorFx(brk).hex('rgb')\r\n\r\n      colorExp.push(brk)\r\n      colorExp.push(clr)\r\n\r\n      legendContent.push([brk, clr])\r\n\r\n    })\r\n  \r\n    return {\r\n      colorExp: colorExp,\r\n      legendContent: legendContent\r\n    }\r\n  \r\n  }\r\n\r\n  /**\r\n * Given a table of data, return a color style expression.\r\n * \r\n * @param {*} data table data (rows).\r\n * @param {*} attr the data attribute of interest, for which the color expression will be built\r\n * @param {*} joinField the field used to join the *data* with the geojson, used to build the filter expression. This \r\n * @param {*} chromaScaleStr a color string representing a scale, to be interpreted by chroma-js to derive colors\r\n * @param {Number} breaks number of discrete breaks in the data\r\n * @param {*} method determines how data will be classified. takes a string parameter for the chroma.limits method;\r\n *  undefined defaults to linear stretch\r\n */\r\nexport const buildColorStyleExpression = (\r\n    data,\r\n    attr,\r\n    joinField,\r\n    chromaScaleStr,\r\n    chromaColorMode,\r\n    breaks,\r\n    method,\r\n    minMax\r\n  ) => {\r\n  \r\n    let chromaObj = chroma.scale(chromaScaleStr)\r\n    if (chromaColorMode) {\r\n      chromaObj = chromaObj.mode(chromaColorMode)\r\n    }\r\n  \r\n    // console.log(\"building style for\", attr, joinField, chromaScaleStr, breaks, method, minMax)\r\n  \r\n    if (breaks === undefined) {\r\n      breaks = 5\r\n    }\r\n  \r\n    if (joinField === undefined) {\r\n      joinField = 'id'\r\n    }\r\n  \r\n    // build the first part of the style expressions\r\n    var styleExp = ['match', ['get', joinField]];\r\n    var heightExp = ['match', ['get', joinField]];\r\n    var opacityExp = [\r\n      'case',\r\n      ['boolean', [joinField, []], false],\r\n      1,\r\n      0.5\r\n    ]\r\n    // create empty arrays, which will receive legend content\r\n    let breakPoints = []\r\n    let colors = []\r\n  \r\n    let maxValue, minValue\r\n    // determine the min and max\r\n    if (minMax === undefined) {\r\n      minMax = minmaxTableAttr(data, attr)\r\n      console.log(\"minMax on the fly\", minMax)\r\n    } else {\r\n      console.log(\"minMax provided\", minMax)\r\n    }\r\n    maxValue = minMax.maxValue\r\n    minValue = minMax.minValue\r\n  \r\n    // by default use linear stretch.\r\n    if (method === undefined) {\r\n  \r\n      method = \"linear\"\r\n      breakPoints = chroma.limits(data.map(row => row[attr]), 'e', breaks).slice(1)\r\n      colors = chromaObj.colors(breaks)\r\n  \r\n      // Calculate the exact color on a color scale for each feature from attr/maxValue\r\n      data.forEach((row) => {\r\n        // build the style expression\r\n        let t = (row[attr] - minValue) / (maxValue - minValue)\r\n        let color = chromaObj.classes(breaks)(t).hex('rgb')\r\n        styleExp.push(row[joinField], color);\r\n      })\r\n  \r\n    } else {\r\n  \r\n      breakPoints = chroma.limits(data.map(row => row[attr]), method, breaks).slice(1)\r\n      colors = breakPoints.map(b => {\r\n        let t = breakPoints.indexOf(breakPoints.filter(d => b <= d)[0]) / (breakPoints.length)\r\n        let c = chroma\r\n          .scale(chromaScaleStr)\r\n          .classes(breaks)(t)\r\n          .brighten(0.25).saturate(0.25).hex('rgb')\r\n        return c\r\n      })\r\n  \r\n      data.forEach((row) => {\r\n        // build the style expression\r\n        let t = breakPoints.indexOf(breakPoints.filter(b => row[attr] <= b)[0]) / (breakPoints.length)\r\n        let color = chromaObj.classes(breaks)(t).brighten(0.25).saturate(0.25).hex('rgb')\r\n        styleExp.push(row[joinField], color);\r\n  \r\n      })\r\n  \r\n    }\r\n  \r\n    let opaque_ids = []\r\n    data.forEach(row => {\r\n      let height = row[attr] * 500\r\n      heightExp.push(row[joinField], height)\r\n    })\r\n  \r\n    var opacityExp = [\r\n      'case',\r\n      ['boolean', [joinField, []], false],\r\n      1,\r\n      0.5\r\n    ]  \r\n  \r\n    // create content for the legend\r\n  \r\n  \r\n    let legendContent = {\r\n      method: method,\r\n      content: zip(breakPoints, colors)\r\n    }\r\n  \r\n    // Last value is the default, used where there is no data\r\n    styleExp.push('rgba(255,255,255,0)');\r\n    // styleExp.push('rgba(200,200,200,0.1)');\r\n    heightExp.push(0)\r\n  \r\n    return {\r\n      styleExp: styleExp,\r\n      legendContent: legendContent,\r\n      heightExp: heightExp\r\n    }\r\n  }\r\n  \r\n  export const multiAttrColorStyleExp = (data, attrs, joinField, chromaScaleStr, breaks, method) => {\r\n  \r\n    let customAttr = \"calcd\"\r\n    let customData = data.map(row => {\r\n      let vals = []\r\n      attrs.forEach(attr => vals.push(row[attr]))\r\n      return {\r\n        [customAttr]: mean(vals),\r\n        [joinField]: row[joinField]\r\n      }\r\n    })\r\n    let minMax = minmaxTableAttr(customData, customAttr)\r\n    // console.log(customData, customAttr, minMax)\r\n  \r\n    return buildColorStyleExpression(customData, customAttr, joinField, chromaScaleStr, breaks, method, minMax)\r\n  }\r\n  \r\n\r\n  ","import moment from 'moment'\r\nimport { get } from 'lodash-es'\r\n\r\nexport const transformToMapboxSourceObject = geojson => {\r\n  return {\r\n    type: \"geojson\",\r\n    data: geojson\r\n  }\r\n}\r\n\r\n/**\r\n * takes the Rainfall pixels geojson layer and nests it within an object expected\r\n * within the Mapbox sources object. Additionally, this takes the geojson\r\n * feature id and copies it into the properties as a string, since the Rainfall\r\n * API returns the IDs as strings.\r\n * @param {*} geojson \r\n */\r\nexport const transformRainfallPixelsToMapboxSourceObject = geojson => {\r\n  let features = geojson.features.map(f => ({\r\n    properties: {\r\n      id: f.id.toString(),\r\n      label: `Virtual Gauge ${f.id.toString()}`,\r\n      data: [],\r\n      total: \"\",\r\n      ...f.properties\r\n    },\r\n    id: f.id,\r\n    geometry: f.geometry\r\n  }))\r\n  return {\r\n    type: \"geojson\",\r\n    data: { type: \"FeatureCollection\", features: features }\r\n  }\r\n}\r\n\r\n/**\r\n * takes the Rainfall gauge geojson layer and nests it within an object expected\r\n * within the Mapbox sources object. Additionally, this takes the geojson\r\n * feature id and copies it into the properties as a string, and renames the\r\n * existing 'id' property as dwid (datawise id) so there is no conflict.\r\n * @param {*} geojson \r\n */\r\nexport const transformRainfallGaugesToMapboxSourceObject = geojson => {\r\n\r\n  let features = geojson.features.map(f => {\r\n    let { id, ...props } = f.properties\r\n    return {\r\n      properties: {\r\n        id: f.id.toString(),\r\n        label: `Gauge ${f.id.toString()}: ${props.name}`,\r\n        data: [],\r\n        total: \"\",\r\n        dwid: id,\r\n        ...props\r\n      },\r\n      id: f.id,\r\n      geometry: f.geometry\r\n    }\r\n  })\r\n\r\n  return {\r\n    type: \"geojson\",\r\n    data: { type: \"FeatureCollection\", features: features }\r\n  }\r\n}\r\n\r\n\r\nexport const transformEventsJSON = (eventsJson) => {\r\n  return eventsJson.events\r\n    .slice(0)\r\n    .reverse()\r\n    .map((e, i) => ({\r\n      ...e,\r\n      startDt: e.start_dt,\r\n      endDt: e.end_dt,\r\n      hours: moment(e.end_dt).diff(moment(e.start_dt), 'hours'),\r\n      isFetching: false,\r\n      selected: false\r\n    }))\r\n    .map((e) => {\r\n      let { start_dt, end_dt, ...event } = e\r\n      return event\r\n    })\r\n    .filter(e => e.hours > 0)\r\n}\r\n\r\nexport const transformDataApiEventsJSON = (eventsJson) => {\r\n  return eventsJson\r\n    .map((e, i) => ({\r\n      ...e,\r\n      startDt: e.start_dt,\r\n      endDt: e.end_dt,\r\n      hours: e.duration,\r\n      isFetching: false,\r\n      selected: false,\r\n      eventid: e.event_label\r\n    }))\r\n    .map((e) => {\r\n      let { start_dt, end_dt, event_label, duration, ...event } = e\r\n      return event\r\n    })\r\n    .filter(e => e.hours > 0)\r\n}\r\n\r\n// export const join_tables = (t1, t2, on) => (\r\n//   _map(t1, (item) => _extend(item, _find(t2, { id: item[on] })))\r\n// )\r\n\r\n\r\nexport const joinTables = (t1, t2, on1, on2) => (\r\n  t1.map(a1 => (\r\n    {\r\n      ...a1,\r\n      ...t2.find(a2 => get(a2, on2) === get(a1, on1))\r\n    }\r\n  ))\r\n)\r\n\r\n/**\r\n * Given a geojson and table (array of objects), perform a left join of the \r\n * table to the geojson using given attributes. Preserves all geojson features\r\n * \r\n * @param {Object} gj geojson as an object (left side of join)\r\n * @param {Array} table array of objects (right side of join)\r\n * @param {String} onGeojsonProp feature property used for the join, as a path (array or string), e.g., 'properties.uid' or ['properties', 'uid]. Defaults to the feature `id`\r\n * @param {String} onTableProp object property used for the join, as a path (array or string), e.g., 'uid'. Defaults to `id`\r\n * @param {Boolean} dropFeatures optional parameter to drop features that don't have matches in the table, effectively making this a right join.\r\n */\r\nexport const joinTabletoGeojson = (gj, table, onGeojsonProp, onTableProp, dropFeatures) => {\r\n\r\n  if (dropFeatures === undefined) {\r\n    dropFeatures = false\r\n  }\r\n\r\n  if (onGeojsonProp === undefined) {\r\n    onGeojsonProp = 'id'\r\n  }\r\n\r\n  if (onTableProp === undefined) {\r\n    onTableProp = false\r\n  }\r\n\r\n  let newFeatures = gj.features\r\n    .map(feature => {\r\n\r\n      let new_props = table.find(a2 => (\r\n        get(a2, onTableProp) === get(feature, onGeojsonProp)\r\n      ))\r\n\r\n      if (new_props === undefined) {\r\n        if (dropFeatures) {\r\n          return false\r\n        } else {\r\n          return feature\r\n        }\r\n      } else {\r\n        return {\r\n          id: feature.id,\r\n          geometry: feature.geometry,\r\n          properties: { ...feature.properties, ...new_props }\r\n        }\r\n      }\r\n\r\n    })\r\n\r\n  if (dropFeatures) {\r\n    newFeatures = newFeatures.filter(f => f !== false)\r\n  }\r\n  return {\r\n    \"type\": \"FeatureCollection\",\r\n    \"features\": newFeatures\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * transform the rainfall API results object\r\n * @param {*} r \r\n */\r\nexport const transformRainfallResults = (r) => {\r\n\r\n  r.data.forEach((s) => {\r\n\r\n    // The API results don't come with rainfall total per sensor, \r\n    // so we tabulate rainfall values from one for all observation \r\n    // intervals for each sensor.we exclude erroneous negative numbers\r\n    let initialValue = 0;\r\n\r\n    let total = (\r\n      s.data.length > 1 & s.data.length !== 0\r\n    ) ? (\r\n        s.data\r\n          .filter(i => i.val >= 0) // for the total, we exclude erroneous negative numbers\r\n          .map(i => i.val)\r\n          .reduce((totalValue, currentValue) => totalValue + currentValue, initialValue)\r\n      ) : (\r\n        s.data[0].val\r\n      )\r\n    // we assign negative totals as null, so they don't later on skew the symbology.\r\n    // s.total = (total >= 0) ? total : null\r\n    s.total = total\r\n\r\n  })\r\n\r\n  // let totals = r.data.map(row => row.total)\r\n  // r.maxValue = Math.max(...totals)\r\n  // r.minValue = Math.min(...totals)\r\n\r\n  return r\r\n\r\n}","import { createReducer } from '@reduxjs/toolkit'\r\nimport moment from 'moment'\r\nimport { set, get, forEach, keys, has, includes, cloneDeep } from 'lodash-es'\r\n\r\nimport { initialState } from './initialState'\r\n\r\nimport {\r\n  SENSOR_TYPES,\r\n  RAINFALL_BREAK_COUNT,\r\n  RAINFALL_COLOR_ARRAY,\r\n  RAINFALL_COLOR_MODE,\r\n  LAYERS_W_RESULTS,\r\n} from './config'\r\n\r\nimport {\r\n  switchTab,\r\n  mapLoaded,\r\n  setStyle,\r\n  filterEventByHours,\r\n  pickRainfallEvent,\r\n  pickRainfallDateTimeRange,\r\n  pickSensor,\r\n  pickInterval,\r\n  pickActiveResultItem,\r\n  requestRainfallData,\r\n  requestRainfallDataInvalid,\r\n  requestRainfallDataSuccess,\r\n  requestRainfallDataFail,\r\n  asyncAction,\r\n  asyncActionSuccess,\r\n  asyncActionFail,\r\n  addLayers,\r\n  calcEventStats,\r\n  setState,\r\n  isFetching,\r\n  startThinking,\r\n  stopThinking,\r\n  buildLayerStyle,\r\n  setLayerStyle,\r\n  applyColorStretch,\r\n  resetLayerSrcs,\r\n  highlightSensor\r\n} from './actions'\r\n\r\nimport {\r\n  selectEvent,\r\n  selectEventInverse,\r\n  selectFetchKwargs,\r\n  selectFetchHistoryItemById,\r\n  selectFetchHistoryItemsById,\r\n  selectFetchHistoryItemsByIdInverse,\r\n  selectAnyFetchHistoryItemById,\r\n  selectRainfallEvents,\r\n  selectFetchHistory,\r\n  selectLayersByIds,\r\n  selectLyrSrcByName,\r\n  selectLayerById,\r\n  \r\n} from './selectors'\r\n\r\nimport {\r\n  minmaxTableAttr,\r\n  buildColorStyleExpression,\r\n  buildRainfallColorStyleExp\r\n} from './utils/mb'\r\nimport {\r\n  joinTabletoGeojson\r\n} from './utils/transformers'\r\n\r\n/**\r\n * root reducer\r\n */\r\nexport const rootReducer = createReducer(\r\n  // INITIAL STATE ----------------------\r\n  initialState,\r\n\r\n  // REDUCERS----------------------------\r\n  {\r\n    [switchTab]: (state, action) => {\r\n      state.progress.tab = action.payload\r\n\r\n      // unset any map styles\r\n\r\n      // set map styles per expression\r\n\r\n    },\r\n    /**\r\n     * Request JSON (+success/fail)\r\n     * used by the fetchJSON middleware\r\n     */\r\n    [asyncAction]: (state, action) => {\r\n      state.progress.isFetching = true\r\n    },\r\n    [asyncActionSuccess]: (state, action) => {\r\n      state.progress.isFetching = false\r\n      const { data, pathArray, keepACopy } = action.payload\r\n      set(state, pathArray, data)\r\n      if (keepACopy === true) {\r\n        let refPatharray = ['refData', pathArray[pathArray.length - 1]]\r\n        set(state, refPatharray, data)\r\n      }\r\n    },\r\n    [asyncActionFail]: (state, action) => {\r\n      state.progress.isFetching = false\r\n      console.log(action.payload)\r\n    },\r\n    [isFetching]: (state, action) => {\r\n      state.progress.isFetching = action.payload.isFetching\r\n    },\r\n    [startThinking]: (state, action) => {\r\n      if (action.payload !== undefined) {\r\n        console.log(action.payload)\r\n        state.progress.messages.push(action.payload)\r\n      }\r\n      state.progress.isThinking = state.progress.isThinking + 1\r\n    },\r\n    [stopThinking]: (state, action) => {\r\n      if (action.payload !== undefined) {\r\n        console.log(action.payload)\r\n        state.progress.messages.push(action.payload)\r\n      }\r\n      state.progress.isThinking = state.progress.isThinking - 1\r\n    },\r\n    /**\r\n     * calculate stats for rainfall events in the store\r\n     */\r\n    [calcEventStats]: (state, action) => {\r\n      const eventsData = state.rainfallEvents.list\r\n      let eventLatest = eventsData.map(e => e.endDt).sort()[eventsData.length - 1]\r\n\r\n      state.rainfallEvents.stats.latest = eventLatest\r\n      state.rainfallEvents.stats.longest = Math.max(...eventsData.map(e => e.hours))\r\n      state.rainfallEvents.stats.maxDate = moment(eventLatest).endOf(\"month\").format()\r\n    },\r\n\r\n    /**\r\n     * pick the datetime range from the calendar\r\n     */\r\n    [pickRainfallDateTimeRange]: (state, action) => {\r\n      // update the start and end datetimes store for the type of rainfall data\r\n      // to be queried.\r\n      const { contextType, startDt, endDt } = action.payload\r\n      let fk = selectFetchKwargs(state, contextType)\r\n      fk.startDt = startDt\r\n      fk.endDt = endDt\r\n      // also deselect any events if previously selected\r\n      selectRainfallEvents(state).list\r\n        .filter(e => e.selected)\r\n        .forEach(e => e.selected === false)\r\n    },\r\n    /**\r\n     * pick the datetime range from the rainfall events list (historic only)\r\n     */\r\n    [pickRainfallEvent]: (state, action) => {\r\n      // get the event from the list, set it's selected state to True\r\n      // console.log(action.payload)\r\n      let { eventid, contextType } = action.payload\r\n      let rainfallEvent = selectEvent(state, eventid)\r\n      rainfallEvent.selected = true\r\n      // set the others to false\r\n      let otherEvents = selectEventInverse(state, eventid)\r\n      otherEvents.forEach((v, i) => v.selected = false)\r\n\r\n      //set the event's start and end datetimes as the actively selected event\r\n      let fk = selectFetchKwargs(state, contextType)\r\n      fk.startDt = rainfallEvent.startDt\r\n      fk.endDt = rainfallEvent.endDt\r\n    },\r\n    /**\r\n     * pick the sensor (the \"where\")\r\n     */\r\n    [pickSensor]: (state, action) => {\r\n\r\n      const { contextType, sensorLocationType, selectedOptions } = action.payload\r\n\r\n      if (selectedOptions !== null) {\r\n        selectFetchKwargs(state, contextType).sensorLocations[sensorLocationType] = selectedOptions\r\n          .filter((opt) => opt !== null)\r\n      } else {\r\n        selectFetchKwargs(state, contextType).sensorLocations[sensorLocationType] = []\r\n      }\r\n\r\n      // we do some additional work if a basin was picked, finding corresponding pixels.\r\n      if (sensorLocationType == 'basin') {\r\n        if (selectedOptions !== null) {\r\n          selectFetchKwargs(state, contextType).sensorLocations[sensorLocationType].forEach((b, i) => {\r\n            let pixelIds = state.refData.basinPixelLookup[b.value]\r\n            console.log(b.value, pixelIds.length)\r\n            selectFetchKwargs(state, contextType).sensorLocations.pixel = pixelIds.map(i => ({ value: i, label: i }))\r\n          })\r\n        } else {\r\n          selectFetchKwargs(state, contextType).sensorLocations.pixel = []\r\n        }\r\n      }\r\n\r\n    },\r\n    [highlightSensor]: (state, action) => {\r\n      console.log(action.payload)\r\n      // let { joinAttr } = action.payload\r\n      // const tracts = state.selections.tracts.length !== 0 ? state.selections.tracts : [\"none\"]\r\n      // selectAllHighlightLayers(state).forEach(lyr => {\r\n      //   let lyrFilter = ['match', ['get', joinAttr], tracts, true, false]\r\n      //   // console.log(lyr.id, lyrFilter)\r\n      //   lyr.filter = lyrFilter\r\n      // })\r\n    },\r\n    /**\r\n     * pick the interval used for rainfall summation: 15-min, hourly, etc.\r\n     */\r\n    [pickInterval]: (state, action) => {\r\n      let { rollup, contextType } = action.payload\r\n      selectFetchKwargs(state, contextType).rollup = rollup\r\n    },\r\n\r\n    /**\r\n     * requestRainfallData/Success/Fail\r\n     * used to indicate that rainfall is being requested, \r\n     * w/ success & failure actions\r\n     */\r\n    [requestRainfallData]: (state, action) => {\r\n\r\n      let { fetchKwargs, requestId, contextType, status, messages } = action.payload\r\n\r\n      let currentFetch = selectFetchHistoryItemById(state, requestId, contextType)\r\n      // creates a fetch history item, which includes all the parameters\r\n      // that were used in generating the request\r\n      if (currentFetch == undefined) {\r\n        selectFetchHistory(state, contextType).push({\r\n          fetchKwargs: fetchKwargs,\r\n          requestId: requestId,\r\n          isFetching: 1,\r\n          isActive: false,\r\n          results: false,\r\n          status: status,\r\n          messages: messages\r\n        })\r\n      } else {\r\n        currentFetch.isFetching = currentFetch.isFetching + 1\r\n      }\r\n\r\n    },\r\n    /**\r\n     * upon successful rainfall data request, turn off fetching status, save\r\n     * the data, save the fetch kwargs as processed, and save the API status.\r\n     */\r\n    [requestRainfallDataSuccess]: (state, action) => {\r\n\r\n      let { requestId, contextType, results, processedKwargs, status, messages } = action.payload\r\n\r\n      console.log(\"request\", requestId, status)\r\n\r\n      // the current fetch:\r\n      selectFetchHistoryItemsById(state, requestId, contextType)\r\n        .forEach(fetchItem => {\r\n          // set fetching status to false\r\n          fetchItem.isFetching = fetchItem.isFetching - 1\r\n          // push the results\r\n          fetchItem.results = { ...results, ...fetchItem.results }\r\n          // save a copy of the request kwargs as interpreted by the API (useful for debugging)\r\n          fetchItem.processedKwargs = processedKwargs\r\n          // save the API status message for good measure\r\n          fetchItem.status = status\r\n          // save the messages as well\r\n          fetchItem.messages = messages\r\n\r\n        })\r\n\r\n    },\r\n    /**\r\n     * Similar to getRainfallSuccess, but used for selecting a previously\r\n     * downloaded rainfall dataset\r\n     */\r\n\r\n    [requestRainfallDataFail]: (state, action) => {\r\n      let { requestId, results, status, messages } = action.payload\r\n      console.log(requestId, status)\r\n      let fetchItem = selectAnyFetchHistoryItemById(state, requestId)\r\n      fetchItem.isFetching = fetchItem.isFetching - 1\r\n      fetchItem.status = status\r\n      fetchItem.messages = messages\r\n      // fetchItem.results = {...results, ...fetchItem.results}\r\n    },\r\n    /**\r\n     * set a rainfall query result as active, and join its data into the \r\n     * corresponding layer\r\n     */\r\n    [pickActiveResultItem]: (state, action) => {\r\n\r\n      let { requestId, contextType } = action.payload\r\n\r\n      // turn off all other items\r\n      selectFetchHistoryItemsByIdInverse(state, requestId, contextType)\r\n        .forEach(i => i.isActive = false)\r\n      // turn on this item\r\n      let i = selectFetchHistoryItemById(state, requestId, contextType)\r\n      i.isActive = true\r\n\r\n      // take the results from this item and join them to the layer sources\r\n      keys(i.results).forEach(sensor => {\r\n\r\n        // make a copy of the original layer, which we've kept for reference\r\n        console.log(`getting reference ${sensor} layer`)\r\n        let gj = cloneDeep(state.refData[sensor].data)\r\n        let table = i.results[sensor]\r\n\r\n        // join the results to the geojson\r\n        console.log(`joining ${sensor} results to layer`)\r\n        let gjForMap = joinTabletoGeojson(gj, table, 'properties.id', 'id', false)\r\n\r\n        // push the geojson to the Mapbox source object\r\n        console.log(`pushing udpated ${sensor} results layer to map`)\r\n        selectLyrSrcByName(state, sensor).data = gjForMap\r\n\r\n      })\r\n\r\n      // for any others, empty them out.\r\n      keys(SENSOR_TYPES)\r\n        .filter(s => !includes(keys(i.results), s))\r\n        .forEach(s => {\r\n          console.log(s)\r\n          let cleanGeojson = cloneDeep(state.refData[s].data)\r\n          selectLyrSrcByName(state, s).data = cleanGeojson\r\n        })\r\n\r\n    },\r\n    /**\r\n     * Swaps the layer source ref data into the mapbox style sheet layer object.\r\n     * If a list of names is provided, it will only do it for those layers;\r\n     * otherwise it does it for all of them.\r\n     */\r\n    [resetLayerSrcs]: (state, action) => {\r\n      let { lyrSrcNames } = action.payload\r\n\r\n      if (lyrSrcNames === undefined) {\r\n        lyrSrcNames = keys(SENSOR_TYPES)\r\n      }\r\n\r\n      if (lyrSrcNames.length > 0) {\r\n        lyrSrcNames.forEach(lyrSrcName => {\r\n          // get the original, clean geojson\r\n          if (has(state.refData, lyrSrcName)) {\r\n            let cleanGeojson = cloneDeep(state.refData[lyrSrcName].data)\r\n            // swap it into the version that's in the mapbox style source object\r\n            selectLyrSrcByName(state, lyrSrcName).data = cleanGeojson\r\n          }\r\n        })\r\n      }\r\n\r\n\r\n\r\n    },\r\n    /**\r\n     * set parameters used to filter list of rainfall events\r\n     */\r\n    [filterEventByHours]: (state, action) => {\r\n      state.eventFilters.maxHours = action.payload.maxHours\r\n      // state.eventFilters.minHours = action.payload.minHours\r\n    },\r\n    /**\r\n     * MAP LOADING AND STYLING ACTIONS\r\n     */\r\n    [mapLoaded]: (state, action) => {\r\n\r\n      // set map loading state\r\n      if (!state.progress.mapLoaded) {\r\n        state.progress.mapLoaded = true\r\n      }\r\n\r\n      return state\r\n    },\r\n    [setStyle]: (state, action) => {\r\n      state.mapStyle = action.payload\r\n      if (!state.progress.initialStyleLoaded) {\r\n        state.progress.initialStyleLoaded = true\r\n      }\r\n      return state\r\n    },\r\n    /**\r\n     * add mapbox layer styles to the style object in the state, optionally\r\n     * at a specified position.\r\n     * See `MAP_LAYERS` in ./config.js for an example of what is consumed here.\r\n     */\r\n    [addLayers]: (state, action) => {\r\n      forEach(action.payload, (v, k) => {\r\n        // if an index is provided, use for layer order\r\n        if (has(v, 'INDEX')) {\r\n          let { INDEX, ...lyr } = v\r\n          let layers = [...state.mapStyle.layers]\r\n          layers.splice(INDEX, 0, lyr);\r\n          state.mapStyle.layers = layers\r\n          // otherwise, put on top it on top of the layer list\r\n        } else {\r\n          state.mapStyle.layers.push(v)\r\n        }\r\n      })\r\n    },\r\n    /**\r\n     * generic action called from middleware, used to set a piece of state, e.g.,\r\n     * with the response from an async call\r\n     */\r\n    [setState]: (state, action) => {\r\n      const { data, path, how } = action.payload\r\n\r\n      if (how == \"replace\") {\r\n        // put the JSON in the store at path using lodash's set function\r\n        set(state, path, data)\r\n      } else if (how == \"append\") {\r\n        let existing = get(state, path)\r\n        // console.log(existing, data)\r\n        set(state, path, [...existing, ...data])\r\n      }\r\n    },\r\n    [buildLayerStyle]: (state, action) => {\r\n      // NOTE: Not in use\r\n\r\n      let { requestId, contextType, sensor } = action.payload\r\n\r\n      let fetchHistoryItem = selectFetchHistoryItemById(state, requestId, contextType)\r\n      let sensors = keys(fetchHistoryItem.results)\r\n\r\n      // We calculate rainfall stats used for the style expression from the \r\n      // composite of all sensor types present, since we want to show gauges \r\n      // and pixels on the same scale at the same time. Note that this looks\r\n      // at all sensors in the results state available at the time, \r\n      // so in cases where the request was for both pixels and gauges,\r\n      // the second one will update the style expression using stats calc'd \r\n      // from both.\r\n\r\n      // first put all the results into one array:\r\n      let allResults = []\r\n      sensors.forEach(s => {\r\n        allResults = allResults.concat(fetchHistoryItem.results[s])\r\n      })\r\n\r\n      // calculate stats for that array\r\n      let minmax = minmaxTableAttr(allResults, 'total')\r\n      // For building the style expression, we need our\r\n      // min and max to be at least 0 for rainfall. This doesn't \r\n      // affect the data download, only the the map symbology:\r\n      // minmax.maxValue = minmax.maxValue < 0 ? 0 : minmax.maxValue\r\n      // minmax.minValue = 0\r\n\r\n      console.log(minmax)\r\n\r\n      // build the style expression\r\n      let symbology = buildColorStyleExpression(\r\n        allResults,\r\n        'total',\r\n        'id',\r\n        RAINFALL_COLOR_ARRAY,\r\n        RAINFALL_COLOR_MODE,\r\n        RAINFALL_BREAK_COUNT,\r\n        'e',\r\n        minmax\r\n      )\r\n\r\n      // update state:\r\n      // save the calc'd style and legend to the fetch history item\r\n      set(fetchHistoryItem, ['styleExp', sensor], symbology.styleExp)\r\n      set(fetchHistoryItem, ['heightExp', sensor], symbology.heightExp)\r\n      set(fetchHistoryItem, ['legendContent', sensor], symbology.legendContent)\r\n\r\n      fetchHistoryItem.stats = minmax\r\n\r\n    },\r\n    /**\r\n     * Set the Mapbox layer's style for a given rainfall data query result.\r\n     * \r\n     * This works on a single sensor, e.g., a pixel or sensor\r\n     * \r\n     * NOTE: we do a little but of superficial data cleaning here so that\r\n     * negative values (which are erroneous for purely visual purposes) don't \r\n     * skew the calculation of the breaks and colors. This doesn't affect the\r\n     * tabular/downloaded data.\r\n     */\r\n    [setLayerStyle]: (state, action) => {\r\n\r\n      // expand the payload\r\n      let { requestId, contextType, sensor } = action.payload\r\n\r\n      // get the source data used for styling the layer\r\n      let fetchHistoryItem = selectFetchHistoryItemById(state, requestId, contextType)\r\n      let sensorsToStyle = keys(fetchHistoryItem.results)\r\n      let sensorsToUnStyle = keys(SENSOR_TYPES).filter(st => !includes(sensorsToStyle, st))\r\n\r\n      // console.log(\"sensorsToStyle\", sensorsToStyle)\r\n      // console.log(\"sensorsToUnStyle\", sensorsToUnStyle)\r\n\r\n      // update state:\r\n      // Apply the style exp for the layers we have in the results object.\r\n      // If it's not there, then it gets un-styled.\r\n      sensorsToStyle.forEach(s => {\r\n        // if fetchHistoryItem has style and legend props, we use those to set\r\n        // the style on the layer.\r\n        if (\r\n          has(fetchHistoryItem, ['styleExp', s]) &&\r\n          has(fetchHistoryItem, ['heightExp', s])\r\n          // has(fetchHistoryItem, ['legendContent', s])\r\n        ) {\r\n\r\n          let styleExp = fetchHistoryItem.styleExp[s]\r\n          let heightExp = fetchHistoryItem.heightExp[s]\r\n\r\n          let lyrIdsToStyle = [`${s}-results`, `${s}-results-3d`]\r\n          // console.log(\"setting style for\", lyrIdsToStyle)\r\n          selectLayersByIds(state, lyrIdsToStyle)\r\n            .forEach(lyr => {\r\n              lyr.paint[`${lyr.type}-color`] = styleExp\r\n\r\n              if (lyr.type == \"fill-extrusion\") {\r\n                lyr.paint[`${lyr.type}-base`] = 0\r\n                lyr.paint[`${lyr.type}-height`] = heightExp\r\n                lyr.paint[`${lyr.type}-opacity`] = 1\r\n              } else {\r\n                lyr.paint[`${lyr.type}-opacity`] = 0.5\r\n              }\r\n\r\n            })\r\n          // set the legend property\r\n          // set(state, ['mapLegend', s], fetchHistoryItem.legendContent)\r\n        }\r\n        // if they don't then this is the first time we're putting this on\r\n        // the map, and we need to calculate them.        \r\n        else {\r\n          console.log(\"style and legend not previously calculated.\")\r\n        }\r\n      })\r\n\r\n\r\n      sensorsToUnStyle.forEach(s => {\r\n        let lyrIdsToNotStyle = [`${s}-results`]\r\n        // console.log(\"clearing style for\", lyrIdsToNotStyle)\r\n        selectLayersByIds(state, lyrIdsToNotStyle)\r\n          .forEach(lyr => {\r\n            lyr.paint[`${lyr.type}-color`] = \"#fff\"\r\n            lyr.paint[`${lyr.type}-opacity`] = 0\r\n          })\r\n      })\r\n\r\n\r\n    },\r\n    [applyColorStretch]: (state, action) => {\r\n\r\n      let { breaks } = action.payload\r\n\r\n      let {colorExp, legendContent} = buildRainfallColorStyleExp('total', breaks)\r\n\r\n      LAYERS_W_RESULTS.forEach(lyrId => {\r\n        let lyr = selectLayerById(state, lyrId)\r\n        lyr.paint[`${lyr.type}-color`] = colorExp\r\n      })\r\n\r\n      state.mapLegend.content = legendContent\r\n\r\n    },\r\n\r\n\r\n  }\r\n) ","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { rootReducer } from \"./reducers\";\r\n\r\nconst store = configureStore ({\r\n  reducer: rootReducer,\r\n  devTools: true\r\n});\r\n/** NOTE\r\n * You may also pass an initial state to createStore which is useful for server\r\n * side rendering but for now we’re not interested in that.\r\n * The most important concept here is that the state in redux \r\n * comes from reducers. Let’s make it clear: reducers produce \r\n * the state of your application.\r\n */\r\n\r\nexport default store;","import React from \"react\";\r\nimport { Tabs, Tab } from \"react-bootstrap\";\r\nimport ReactMarkdown from \"react-markdown/with-html\";\r\n\r\nimport \"./aboutContent.scss\";\r\n\r\nconst what1 = `\r\nHave you ever wondered how rainfall is actually measured? Technical instruments, called rain gauges, are designed to collect and accurately measure rainfall during wet weather events. However, a rain gauge can only provide a specific rainfall measurement for the limited geographic area where the gauge is located.\r\n\r\nOn the flip side, radar systems, often used in weather reports, do not measure rainfall directly, but rather they detect the intensity of microwave energy reflected by raindrops, called reflectivity. Through the use of a mathematical formula, the reflectivity of the raindrops can be converted by the radar system into rainfall estimates for a particular defined area.\r\n\r\nNeither measurement technique is perfect, but when the two are combined—when radar estimates are calibrated with actual rain gauge data—a highly accurate and valuable source of rainfall data can be calculated over large geographic areas.\r\n\r\nBecause engineers and planners addressing the wet weather issue need this level of accuracy, 3 Rivers Wet Weather created the calibrated radar rainfall system in 2001. Communities throughout Allegheny County use this data—provided in both real-time and historical formats—to design more cost-effective solutions to reduce or eliminate sewage overflows and improve stormwater management.\r\n\r\nThe NEXRAD radar (located in Moon Township) data is calibrated with the rain gauge measurements collected during the same time period and rain event for every square kilometer in Allegheny County. The resulting rainfall data is equivalent in accuracy to having 2,276 rain gauges placed across the County.\r\n\r\n---   \r\n`;\r\nconst what2 = `\r\nCurrently, this site offers rainfall data in three buckets:\r\n\r\n* **Real-time Rainfall** data: provisional rainfall data for rain gauges and radar pixels\r\n* **Historical Rain Gauge** data: QA/QC'd rain gauge data, usually available within 30-60 days\r\n* **Calibrated Radar Rainfall** data: QA/QC'd, gauge-adjusted radar rainfall observations, typically available within 30-60 days\r\n\r\nEach of these is accessible from a tab at the top of the page.\r\n\r\n### Real-time Rainfall Data\r\n\r\nProvisional data from 3RWW's 33 rain gauges and NEXRAD radar pixels is collected and updated every 15 minutes to provide accurate, quality rainfall information as it is occurring. This includes both gauge and radar rainfall data. \r\n\r\nData users are cautioned to consider carefully the provisional nature of the information before using it for decisions. Information concerning the accuracy and appropriate uses of these data or concerning other hydrologic data may be obtained from the 3RWW.\r\n\r\n### Historical Rain Gauge\r\n\r\nThe data from 33 rain gauges, which typically is updated to include data points not transmitted by the gauges in real-time--is available in this section. The data may be retrieved for any combination of the rain gauges during a specified time span. The data may also be displayed in 15-minute increments or aggregated to hourly or daily data points.\r\n\r\n### Calibrated Radar Rainfall\r\n\r\nThe calibrated radar rainfall section allows the retrieval of archived gauge-adjusted radar rainfall data for each of the 2313 pixels mapped by the NEXRAD radar cross-section. Calibration is performed by <a href=\"https://www.vieuxinc.com/\" target=\"_blank\">Vieux Associates</a>.\r\n`;\r\n\r\nconst how1 = `\r\n## Querying Rainfall\r\n\r\nSelect the start and end date/time, along with the interval and the gauges or basins (for radar pixels). Press \"Get Rainfall Data\" button to get the data.\r\n\r\nRainfall data is collected and stored in 15-minute increments, which allows for 15-minute, hourly, and daily aggregations to be calculated. Note that if a daily interval is selected, the start and end selections will begin at midnight and the start and end hour will be ignored.\r\n\r\nQuery results will be listed in a panel below on each page and shown on the map. The tabular data output may be viewed and downloaded on the page by selecting the 'View and Download Results' Button. Download formats currently include a CSV tabular format, for use in spreadsheet software. Spatial formats will be included in the future.\r\n\r\nThe output table for each query result contains:\r\n\r\n* a gauge or pixel ID\r\n* a date/time of the observation (presented as standard ISO 8061 datetime text). For hourly and daily aggregations, the start and end time of the observation is indicated using the standard ISO 8061 datetime range format, with start and end delimited by a \"/\".\r\n* a rainfall amount (in inches) \r\n* a source code, which indicates where the rainfall measurement came from.\r\n\r\nThe source code can be found in the following table:\r\n\r\n| Source |\tDescription |\r\n| --- | --- |\r\n| R |\tCalibrated radar rainfall data |\r\n| G-0 | No gauge or calibrated radar rainfall data is available, but not for the reasons given for N/D below |\r\n| G-1 |\tDerived from inverse distance squared weighting based on one rain gauge |\r\n| G-2 |\tDerived from inverse distance squared weighting based on two rain gauges |\r\n| G-3 |\tDerived from inverse distance squared weighting based on three rain gauges |\r\n| N/D |\tNo data was collected for this data point. This may be because no data was collected at the time or the pixel may be outside of the data collection boundary. |\r\n| RTRR | Real-time radar rainfall. Data shown are provisional.|\r\n| RTRG | Real-time rain gauge data. Data shown are provisional. |\r\n\r\n\r\nNote that the source code only appears for the 15-minute increments. Hourly or daily increment may include different source codes, depending on calibration method.\r\n`;\r\n\r\nconst how2 = `\r\n## 3RWW Data API\r\n\r\nThe rainfall data is served up from 3RWW's Data **A**pplication **P**rogramming **I**nterface (API). Currently a few functions are documented and available through [${process.env.REACT_APP_API_URL_ROOT}](${process.env.REACT_APP_API_URL_ROOT}).\r\n`;\r\n\r\nexport const AboutContent = () => {\r\n  return (\r\n    <Tabs \r\n      defaultActiveKey=\"what1\" \r\n      id=\"about-tabs\"\r\n      variant=\"pills\"\r\n      mountOnEnter={true}\r\n    >\r\n      <Tab eventKey=\"what1\" title=\"Overview\">\r\n        <div className=\"about-body\">\r\n          <ReactMarkdown children={what1} />\r\n        </div>               \r\n      </Tab>\r\n      <Tab eventKey=\"what2\" title=\"Available Datasets\">\r\n        <div className=\"about-body\">\r\n          <ReactMarkdown children={what2} />\r\n        </div>\r\n      </Tab>\r\n      <Tab eventKey=\"how1\" title=\"Getting Data\">\r\n        <div className=\"about-body\">\r\n          <ReactMarkdown children={how1} />\r\n        </div>\r\n      </Tab>\r\n      <Tab eventKey=\"more\" title=\"Webinar\">\r\n        <div className=\"about-body\">\r\n          <h2>Learn more!</h2>\r\n          <p>Our January 2021 webinar provides an overview of the rainfall system and a how-to for using this site.</p>\r\n          <div class=\"embed-responsive embed-responsive-16by9\">\r\n            <iframe class=\"embed-responsive-item\" src=\"https://www.youtube.com/embed/mwOu2QRx6oU\" title=\"YouTube video player\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>  \r\n          </div> \r\n        </div>\r\n      </Tab>\r\n      <Tab eventKey=\"how2\" title=\"3RWW Data API\">\r\n        <div className=\"about-body\">\r\n          <ReactMarkdown children={how2} />\r\n        </div>\r\n      </Tab>\r\n\r\n\r\n    </Tabs>\r\n  );\r\n};\r\n","import axios from 'axios';\r\nimport { MD5 } from 'object-hash'\r\nimport { includes, keys } from 'lodash-es'\r\nimport moment from 'moment'\r\n\r\nimport {\r\n  requestRainfallData,\r\n  requestRainfallDataSuccess,\r\n  requestRainfallDataFail,\r\n  asyncAction,\r\n  asyncActionSuccess,\r\n  asyncActionFail,\r\n  startThinking,\r\n  stopThinking,\r\n  addLayers,\r\n  pickRainfallDateTimeRange,\r\n  calcEventStats,\r\n  pickActiveResultItem,\r\n  switchTab,\r\n  applyColorStretch,\r\n  resetLayerSrcs,\r\n  highlightSensor,\r\n  pickSensor\r\n} from './actions'\r\n\r\nimport {\r\n  selectFetchKwargs,\r\n  selectFetchHistoryItemById,\r\n  selectActiveFetchHistoryItem,\r\n  selectLatestlegacyGarrTS,\r\n  selectLatestlegacyGaugeTS\r\n} from './selectors'\r\n\r\nimport { \r\n  // transformEventsJSON, \r\n  transformDataApiEventsJSON,\r\n  transformRainfallGaugesToMapboxSourceObject,\r\n  transformRainfallPixelsToMapboxSourceObject,\r\n  transformRainfallResults\r\n} from './utils/transformers'\r\n\r\n\r\nimport {\r\n  MAP_LAYERS,\r\n  // EVENTS_JSON_URL,\r\n  EVENTS_API_URL,\r\n  TIMESTAMPS_API_URL,\r\n  URL_BASIN_PIXEL_LOOKUP,\r\n  URL_GARRD_GEOJSON,\r\n  URL_GAUGE_GEOJSON,\r\n  CONTEXT_TYPES,\r\n  REQUEST_TIME_INTERVAL,\r\n  // BREAKS_005,\r\n  BREAKS_050,\r\n  // BREAKS_100,\r\n  SENSOR_TYPES\r\n} from './config'\r\n\r\n\r\nimport store from './index'\r\n\r\n/**\r\n * Request JSON from a URL; put response.data into store via props \r\n * spec'd in pathArray. Optionally transform response.data via passed-in\r\n * transformer function\r\n * @param {*} payload \r\n */\r\nexport function fetchJSON(payload) {\r\n  // Thunk middleware knows how to handle functions.\r\n  // It passes the dispatch method as an argument to the function,\r\n  // thus making it able to dispatch actions itself.\r\n\r\n  // First dispatch: the app state is updated to inform\r\n  // that the API call is starting; the currentEvent\r\n  // is set in the store\r\n  return function (dispatch) {\r\n\r\n    const { url, pathArray, transformer, keepACopy } = payload\r\n\r\n    dispatch(startThinking(`getting data from \"${url}\"`))\r\n    dispatch(asyncAction(url))\r\n\r\n    let data;\r\n\r\n    // The function called by the thunk middleware can return a value,\r\n    // that is passed on as the return value of the dispatch method.\r\n    // In this case, we return a promise to wait for.\r\n    // This is not required by thunk middleware, but it is convenient for us.\r\n    return axios({\r\n      url: url,\r\n      method: 'GET',\r\n    })\r\n      .then(\r\n        (response) => {\r\n          if (transformer) {\r\n            data = transformer(response.data)\r\n          } else {\r\n            data = response.data\r\n          }\r\n          // NOTE: We can dispatch many times!\r\n          // Here, we update the app state with the results of the API call. \r\n          dispatch(asyncActionSuccess({ data: data, pathArray: pathArray, keepACopy: keepACopy }))\r\n          return true\r\n        },\r\n        // Do not use catch, because that will also catch\r\n        // any errors in the dispatch and resulting render,\r\n        // causing a loop of 'Unexpected batch number' errors.\r\n        // https://github.com/facebook/react/issues/6895        \r\n        (error) => {\r\n          console.log('An error occurred.', error)\r\n          dispatch(asyncActionFail('An error occurred.'))\r\n          return false\r\n        }\r\n      )\r\n      .finally(() => dispatch(stopThinking(`data from \"${url}\" loaded to ${pathArray.join(\".\")}`)))\r\n\r\n  }\r\n}\r\n\r\n\r\n/******************************************************************************\r\n * APPLICATION START UP \r\n */\r\n\r\n/**\r\n * asynchronously fetch the three seed datasets required for the app to start and render. \r\n * Called by initDataFetch \r\n * @param {*} dispatch \r\n */\r\nfunction promiseFetchReferenceDatasets(dispatch) {\r\n\r\n  return Promise.all([\r\n    // get the rainfall events json\r\n    // new Promise((resolve, reject) => {\r\n    //   let result = dispatch(fetchJSON({\r\n    //     url: EVENTS_JSON_URL,\r\n    //     pathArray: [\"rainfallEvents\", \"list\"],\r\n    //     transformer: transformEventsJSON,\r\n    //     keepACopy: false\r\n    //   }))\r\n    //   resolve(result)\r\n    // }),\r\n    //get the rainfall events json from the API\r\n    new Promise((resolve, reject) => {\r\n      let result = dispatch(fetchJSON({\r\n        url: EVENTS_API_URL,\r\n        pathArray: [\"rainfallEvents\", \"list\"],\r\n        transformer: transformDataApiEventsJSON,\r\n        keepACopy: false\r\n      }))\r\n      resolve(result)\r\n    }),    \r\n    \r\n    // get the rainfall events json\r\n    new Promise((resolve, reject) => {\r\n      let result = dispatch(fetchJSON({\r\n        url: TIMESTAMPS_API_URL,\r\n        pathArray: [\"stats\", \"latest\"],\r\n        transformer: false,\r\n        keepACopy: false\r\n      }))\r\n      resolve(result)\r\n    }),        \r\n    // get the pixel-basin lookup json\r\n    new Promise((resolve, reject) => {\r\n      let result = dispatch(fetchJSON({\r\n        url: URL_BASIN_PIXEL_LOOKUP,\r\n        pathArray: ['refData', 'basinPixelLookup'],\r\n        transformer: false,\r\n        keepACopy: false\r\n      }))\r\n      resolve(result)\r\n    }),\r\n    // get the gauge geojson\r\n    new Promise((resolve, reject) => {\r\n      let result = dispatch(fetchJSON({\r\n        url: URL_GAUGE_GEOJSON,\r\n        pathArray: [\"mapStyle\", \"sources\", \"gauge\"],\r\n        transformer: transformRainfallGaugesToMapboxSourceObject,\r\n        keepACopy: true\r\n      }))\r\n      resolve(result)\r\n    }),\r\n    // get the pixel geojson\r\n    new Promise((resolve, reject) => {\r\n      let result = dispatch(fetchJSON({\r\n        url: URL_GARRD_GEOJSON,\r\n        pathArray: [\"mapStyle\", \"sources\", \"pixel\"],\r\n        transformer: transformRainfallPixelsToMapboxSourceObject,\r\n        keepACopy: true\r\n      }))\r\n      resolve(result)\r\n    })\r\n\r\n  ])\r\n\r\n}\r\n\r\n/**\r\n * initial async data fetches, map set up, and pre-calculations\r\n * @param {*} payload \r\n */\r\nexport function initDataFetch(payload) {\r\n\r\n  return function (dispatch) {\r\n\r\n    dispatch(startThinking(\"Loading reference data and map layers\"))\r\n\r\n    // get all the core datsets and layers and add them to the store (in parallel), then...\r\n    promiseFetchReferenceDatasets(dispatch)\r\n      .then((r) => {\r\n        \r\n        // add additional map layer styles\r\n        dispatch(addLayers(MAP_LAYERS))\r\n        \r\n        // apply style defaults to the default results map layers\r\n        dispatch(applyColorStretch({breaks: BREAKS_050}))\r\n\r\n        // calculate event stats\r\n        // TODO: make an API endpoint for a database view that does this calc \r\n        // to save some time here\r\n        // dispatch(calcEventStats())\r\n\r\n      })\r\n      .then(() => {\r\n\r\n        // set the default date/time range for all the contexts\r\n\r\n        dispatch(pickRainfallDateTimeRange({\r\n          contextType: CONTEXT_TYPES.legacyRealtime,\r\n          startDt: moment().subtract(2, 'hour').toISOString(),\r\n          endDt: moment().toISOString()\r\n        }))\r\n\r\n        let maxDateLegacyGauge = selectLatestlegacyGaugeTS(store.getState())\r\n        dispatch(pickRainfallDateTimeRange({\r\n          contextType: CONTEXT_TYPES.legacyGauge,\r\n          // startDt: moment(maxDateLegacyGauge).startOf('month').toISOString(),\r\n          startDt: moment(maxDateLegacyGauge).subtract(1, 'month').toISOString(),\r\n          endDt: maxDateLegacyGauge\r\n        }))\r\n\r\n        let maxDateLegacyGarr = selectLatestlegacyGarrTS(store.getState())\r\n        dispatch(pickRainfallDateTimeRange({\r\n          contextType: CONTEXT_TYPES.legacyGarr,\r\n          // startDt: moment(maxDateLegacyGarr).startOf('month').toISOString(),\r\n          startDt: moment(maxDateLegacyGarr).subtract(1, 'month').toISOString(),\r\n          endDt: maxDateLegacyGarr\r\n        }))\r\n\r\n      })\r\n      .then(() => dispatch(stopThinking(\"Initial data load complete.\"))\r\n      )\r\n\r\n  }\r\n}\r\n\r\n/**\r\n * Recursive function for making calls to the API while the request is being\r\n * processed. Calls itself, or success or fail actions depending on API \r\n * response. \r\n * @param {*} dispatch \r\n * @param {*} requestId \r\n * @param {*} sensor \r\n * @param {*} contextType \r\n * @param {*} url \r\n * @param {*} params \r\n */\r\nconst _fetchRainfallDataFromApiV2 = (dispatch, requestId, sensor, contextType, url, params) => {\r\n\r\n  // console.log(dispatch, requestId, sensor, contextType, url, params)\r\n\r\n  // assemble the arguments for fetch\r\n  let requestKwargs = {\r\n    url: url,\r\n    method: 'POST'\r\n  }\r\n  // if the request params are explicitly not `false`, then \r\n  // add them in; otherwise we've called this function in a recursive loop to\r\n  // check on job status, and we don't want to include the params in that req.\r\n  if (params !== false) {\r\n    // requestKwargs.params = params\r\n    requestKwargs.data = params\r\n  }\r\n\r\n  // make the request:\r\n  axios(requestKwargs)\r\n    .then(\r\n      (response) => {\r\n        // console.log(response)\r\n        // get the API's JSON response from the data prop of the ajax response obj\r\n        let r = response.data\r\n        // log it\r\n        console.log(`job ${r.meta.jobId} ${r.status} - ${sensor}`)\r\n        // if job status is queued or started:\r\n        if (includes(['queued', 'started'], r.status)) {\r\n          // wait, then check on status/results at the provided 'job-url'\r\n          // this triggers a recurive call to _fetchRainfallDataFromApiV2\r\n          setTimeout(\r\n            () => _fetchRainfallDataFromApiV2(dispatch, requestId, sensor, contextType, r.meta.jobUrl, false),\r\n            REQUEST_TIME_INTERVAL\r\n          )\r\n        // if status is deferred or failed,\r\n        } else if (includes(['deferred', 'failed'], r.status)) {\r\n          // Dispatch the job failed action for recording in state, \r\n          // triggering ui, etc.\r\n          dispatch(requestRainfallDataFail({\r\n            requestId: requestId,\r\n            contextType: contextType,\r\n            results: {[sensor]: false},\r\n            status: r.status,\r\n            messages: r.messages            \r\n          }))\r\n        // if the job finishes:\r\n        } else if (r.status === 'finished') {\r\n\r\n          try {\r\n\r\n\r\n            // handle scenarios where the job technically finished but returned\r\n            // no results\r\n            if (r.data === null) {\r\n\r\n              console.log('No data was returned.')\r\n              dispatch(requestRainfallDataFail({\r\n                requestId: requestId,\r\n                contextType: contextType,\r\n                results: {[sensor]: false},\r\n                status: \"error\",\r\n                messages: r.messages\r\n              }))\r\n\r\n            } else {\r\n\r\n              // calculate totals and any stats\r\n              r = transformRainfallResults(r)\r\n\r\n              // dispatch the success action, which puts the data in the correct \r\n              // places, updates the status in the ui, etc.\r\n              dispatch(requestRainfallDataSuccess({\r\n                requestId: requestId,\r\n                contextType: contextType,\r\n                results: {[sensor]: r.data},\r\n                processedKwargs: r.args,\r\n                status: r.status,\r\n                messages: r.messages\r\n                // stats: {\r\n                //   maxValue: r.maxValue,\r\n                //   minValue: r.minValue\r\n                // }\r\n                // messages: (r.messages.length > 0) ? (r.messages) : (false)\r\n              }))\r\n\r\n              // Set the result item to active by default. This will \r\n              // highlight it in the history list for the context and put it \r\n              // on the map for that context.\r\n              dispatch(pickActiveResultItem({\r\n                requestId: requestId,\r\n                contextType: contextType\r\n              }))              \r\n\r\n            }\r\n\r\n\r\n\r\n          } catch (e) {\r\n            // this handles any server-side request errors.\r\n            console.log('An error occurred processing the result.', e)\r\n            dispatch(requestRainfallDataFail({\r\n              requestId: requestId,\r\n              contextType: contextType,\r\n              results: {[sensor]: false},\r\n              status: \"error\",\r\n              messages: r.messages\r\n            }))\r\n\r\n          }\r\n\r\n        } else if (r.status === \"does not exist\") {\r\n          console.log(\"Job was cancelled.\")\r\n          dispatch(requestRainfallDataFail({\r\n            requestId: requestId,\r\n            contextType: contextType,\r\n            results: {[sensor]: false},\r\n            status: r.status,\r\n            messages: r.messages\r\n          }))\r\n        }\r\n\r\n      },\r\n      // if the request itself errors out, we trigger dispatch the failure action\r\n      (error) => {\r\n        console.log('An error occurred.', error)\r\n        dispatch(requestRainfallDataFail({\r\n          requestId: requestId,\r\n          contextType: contextType,\r\n          results: {[sensor]: false},\r\n          status: \"error\",\r\n          messages: ['An error occurred when trying to fetch the rainfall data.', error]\r\n        }))\r\n      }\r\n    )\r\n    .catch(error => {\r\n      console.error('An error occurred.', error)\r\n      dispatch(requestRainfallDataFail({\r\n        requestId: requestId,\r\n        contextType: contextType,\r\n        results: {[sensor]: false},\r\n        status: \"error\",\r\n        messages: ['An error occurred when trying to fetch the rainfall data.', error]\r\n      }))      \r\n    });\r\n    // .finally(() => console.log(\"_fetchRainfallDataFromApiV2 completed\"))\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * request data from the 3RWW Rainfall API\r\n * @param {*} payload \r\n */\r\nexport function fetchRainfallDataFromApiV2(payload) {\r\n\r\n  let state = store.getState()\r\n\r\n  return function (dispatch) {\r\n\r\n    let { contextType, rainfallDataType } = payload\r\n    // get the active batch of Fetch Kwargs\r\n    let kwargs = selectFetchKwargs(state, contextType)\r\n\r\n    // generate a unique ID, based on the hash of the kwargs\r\n    // this will let us 1) update the correct object in fetchHistory\r\n    // with the results, and 2) not retrieve the same data twice\r\n    let requestId = MD5(kwargs)\r\n\r\n    let matchingRequest = selectFetchHistoryItemById(state, requestId, contextType)\r\n\r\n    if (matchingRequest !== undefined) {\r\n      console.log(\"This exact request was already made. Keeping existing data from request\", matchingRequest.requestId)\r\n      if (matchingRequest.isActive === false) {\r\n        dispatch(pickActiveResultItem({\r\n          requestId: matchingRequest.requestId,\r\n          contextType: contextType\r\n        }))\r\n      }\r\n\r\n    }\r\n\r\n    // parse the props of selectedEvent to form the body of the API request\r\n    let requestSensors = ['gauge', 'basin']\r\n\r\n    // return Promise.all([\r\n    //   // get the rainfall events json\r\n    //   new Promise((resolve, reject) => {\r\n\r\n    //   })\r\n    \r\n    // ])\r\n\r\n    requestSensors.forEach((s, i) => {\r\n\r\n      // skip if no selections\r\n      if (kwargs.sensorLocations[s].length === 0) {\r\n        return\r\n      }\r\n\r\n      // assemble the request params, except IDs\r\n      let requestParams = {\r\n        start_dt: kwargs.startDt,\r\n        end_dt: kwargs.endDt,\r\n        rollup: kwargs.rollup,\r\n        f: kwargs.f\r\n      }\r\n\r\n      // then deal with the IDs.\r\n      // It gets a little weird here: get the correct names used for various \r\n      // api params and state tree lookups\r\n      // 0: api url endpoint and state tree path, 1: api param\r\n      let sensor = (s === 'basin') ? ['pixel', 'pixels'] : ['gauge', 'gauges']\r\n\r\n      requestParams[sensor[1]] = kwargs.sensorLocations[sensor[0]].map(i => i.value).join(\",\")\r\n\r\n      // indicate that the request is proceeding in the UI\r\n      // stores the fetchKwargs from the state in the history object.\r\n      dispatch(requestRainfallData({\r\n        fetchKwargs: kwargs,\r\n        requestId: requestId,\r\n        contextType: contextType\r\n      }))\r\n\r\n      let url = `${process.env.REACT_APP_API_URL_ROOT}v2/${sensor[0]}/${rainfallDataType}/`\r\n      let params = requestParams\r\n\r\n      _fetchRainfallDataFromApiV2(dispatch, requestId, sensor[0], contextType, url, params)\r\n\r\n    })\r\n\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * \r\n * @param {*} payload \r\n */\r\nexport function pickDownload(payload) {\r\n\r\n  let { contextType, ...fetchHistoryItem } = payload\r\n\r\n  return function (dispatch) {\r\n    \r\n    let requestId = fetchHistoryItem.requestId\r\n\r\n    // let sensors = keys(fetchHistoryItem.results)\r\n    if (!fetchHistoryItem.isActive) {\r\n      // Set the result item to active by default. This will \r\n      // highlight it in the history list for the context and put it \r\n      // on the map for that context.\r\n      dispatch(pickActiveResultItem({\r\n        requestId: requestId,\r\n        contextType: contextType\r\n      }))\r\n    }\r\n\r\n    // Update the map layer style for the layers used to represent\r\n    // results. e.g., gauge-results, pixel-results.\r\n    // sensors.forEach(sensor => {\r\n    //   dispatch(setLayerStyle({\r\n    //     requestId: requestId,\r\n    //     contextType: contextType,\r\n    //     sensor: sensor,\r\n    //     recall: true\r\n    //   }))\r\n    // })\r\n\r\n  }\r\n \r\n}\r\n\r\n// /**\r\n//  * function for re-running a previous download\r\n//  * @param {*} payload \r\n//  */\r\n// export function reFetchRainfallDataFromApiV2(payload) {\r\n\r\n//   return function (dispatch) {\r\n//     // select the current fetch item from the history via requestId\r\n//     // dispatch a reducer that updates the fetchKwargs for the \r\n//     // context with that item.\r\n//     // run fetchRainfallDataFromApiV2\r\n//   }\r\n\r\n// }\r\n\r\n\r\nexport function switchContext(payload) {\r\n\r\n  let contextType = payload\r\n  \r\n  return function(dispatch) {\r\n  \r\n    // switch the tab\r\n    dispatch(switchTab(contextType))\r\n\r\n    // select the active item in the context (which we just set above)\r\n    let fhi = selectActiveFetchHistoryItem(store.getState())\r\n\r\n    if (fhi === undefined) {\r\n      dispatch(resetLayerSrcs({lyrSrcNames: keys(SENSOR_TYPES)}))\r\n    } else {\r\n      dispatch(pickActiveResultItem({\r\n        requestId: fhi.requestId,\r\n        contextType: contextType\r\n      }))      \r\n    }\r\n    // set the active result\r\n\r\n\r\n    // set the layer style on the map using the active item, if any\r\n    // dispatch(setLayerStyle({\r\n    //   requestId: fhi.requestId,\r\n    //   contextType: payload,\r\n    // }))\r\n\r\n  }\r\n\r\n}\r\n\r\n/******************************************************************************\r\n * ACTIONS THAT FIRE MULTIPLE REDUCERS\r\n */\r\n\r\n/**\r\n * Dispatch pickTract and highlightTract when clicking a tract on the map.\r\n * Use when the tract's geojson feature is the source of the tract ID.\r\n * @param {*} payload \r\n */\r\nexport function pickSensorFromMap(payload) {\r\n\r\n  const sensorFeature = { ...payload }\r\n  console.log(sensorFeature)\r\n\r\n  return function (dispatch) {\r\n\r\n    // dispatch(pickSensor({ tid: tid }))\r\n    dispatch(highlightSensor(sensorFeature))\r\n\r\n  }\r\n\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Navbar, Nav, Button, Modal, Col, Row } from 'react-bootstrap';\r\nimport ReactMarkdown from 'react-markdown/with-html'\r\n\r\n// icons\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n// import { faSpinner, faCloudRain } from '@fortawesome/free-solid-svg-icons'\r\n\r\n// import {legend} from '../data/legend'\r\nimport { AboutContent } from './aboutContent'\r\n\r\nimport { CONTEXT_TYPES, ROOT } from '../../store/config'\r\n\r\nimport { switchContext } from '../../store/middleware'\r\n\r\nimport './navigation.scss';\r\n\r\nclass Navigation extends Component {\r\n\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.handleShow = this.handleShow.bind(this);\r\n    this.handleClose = this.handleClose.bind(this);\r\n\r\n    this.state = {\r\n      show: true,\r\n      showWhich: \"AboutButton\",\r\n      content: {\r\n        AboutButton: {\r\n          title: (\r\n            <Row>\r\n              <Col lg={8}>\r\n                <h1>Make It Rain <small><em>beta</em></small></h1>\r\n                <h2><small>Map and download hyper-local rainfall measurements for Allegheny County</small></h2>\r\n              </Col>\r\n              <Col>\r\n                <small>A project by </small>\r\n                <br></br><img className=\"brand-logo\" src={`${ROOT}static/assets/3rww_logo_full_inverse_transparent_blue.png`} placeholder=\"3 River Wet Weather\" alt=\"3RWW Logo\" />\r\n              </Col>\r\n            </Row>\r\n          ),\r\n          content: <AboutContent/>\r\n        },\r\n        // LegendButton: {\r\n        //   title:\"Map Legend\",\r\n        //   content: legend\r\n        // }\r\n      }\r\n    };\r\n  }\r\n\r\n  handleClose(e) {\r\n    this.setState({ show: false, showWhich: null });\r\n  }\r\n\r\n  handleShow(e) {\r\n    console.log(e.target.id)\r\n    this.setState({ show: true, showWhich: e.target.id });\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"nav-container\">\r\n        <Navbar bg=\"primary\" variant=\"dark\" expand=\"md\">\r\n\r\n          <Navbar.Brand className=\"d-none d-sm-block\">\r\n            <img className=\"nav-brand-logo\" src={`${ROOT}static/assets/3rww_logo_full_inverse_transparent.png`} alt=\"3RWW Logo\" />&nbsp;\r\n            Make It Rain <small><em>beta</em></small>\r\n            {/* <small className=\"text-muted d-none d-lg-inline\">by 3 Rivers Wet Weather</small> */}\r\n          </Navbar.Brand>\r\n          <Navbar.Brand className=\"d-block d-sm-none\" style={{ fontSize: 0.9 + 'rem' }}>\r\n            <img className=\"nav-brand-logo-xs\" src={`${ROOT}static/assets/3rww_logo_full_inverse_transparent.png`} alt=\"3RWW Logo\" />&nbsp;\r\n            Make It Rain <small><em>beta</em></small>\r\n          </Navbar.Brand>\r\n          {/* <Navbar.Text>\r\n            &nbsp;&nbsp;\r\n            {this.props.isThinking === true || this.props.mapLoaded === false ? (\r\n              <span className=\"fa-layers fa-fw\">\r\n                <FontAwesomeIcon icon={faSpinner} pulse size=\"4x\"/>\r\n                <FontAwesomeIcon icon={faCloudRain} size=\"2x\" transform=\"right-8\"/>\r\n              </span>\r\n            ) : (\"\")}\r\n          </Navbar.Text> */}\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav variant=\"pills\" className=\"mr-auto\" defaultActiveKey={CONTEXT_TYPES.legacyRealtime}>\r\n              <Nav.Item>\r\n                <Nav.Link\r\n                  active={this.props.tab === CONTEXT_TYPES.legacyRealtime}\r\n                  eventKey={CONTEXT_TYPES.legacyRealtime}\r\n                  onSelect={this.props.switchContext}\r\n                >\r\n                  Real-Time Rainfall\r\n                </Nav.Link>\r\n              </Nav.Item>\r\n              <Nav.Item>\r\n                <Nav.Link\r\n                  active={this.props.tab === CONTEXT_TYPES.legacyGauge}\r\n                  eventKey={CONTEXT_TYPES.legacyGauge}\r\n                  onSelect={this.props.switchContext}\r\n                >Historical Rain Gauge</Nav.Link>\r\n              </Nav.Item>\r\n              <Nav.Item>\r\n                <Nav.Link\r\n                  active={this.props.tab === CONTEXT_TYPES.legacyGarr}\r\n                  eventKey={CONTEXT_TYPES.legacyGarr}\r\n                  onSelect={this.props.switchContext}\r\n                >Calibrated Radar Rainfall</Nav.Link>\r\n              </Nav.Item>\r\n            </Nav>\r\n            <Nav className=\"ml-auto\">\r\n              {/* <Nav.Item\r\n                className=\"btn btn-outline-primary btn-sm\"\r\n                id=\"LegendButton\"\r\n                onClick={this.handleShow}              \r\n                >\r\n                Map Legend\r\n              </Nav.Item> */}\r\n              <Nav.Item\r\n                className=\"btn btn-outline-light btn-sm\"\r\n                id=\"AboutButton\"\r\n                onClick={this.handleShow}\r\n              >\r\n                About\r\n              </Nav.Item>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n\r\n        <Modal\r\n          show={this.state.show}\r\n          onHide={this.handleClose}\r\n          size=\"lg\"\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>\r\n              {(this.state.showWhich) ? this.state.content[this.state.showWhich].title : (null)}\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n              {(this.state.showWhich) ? this.state.content[this.state.showWhich].content : (null)}\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={this.handleClose}>\r\n              Close\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    isThinking: state.progress.isThinking > 0,\r\n    mapLoaded: state.progress.mapLoaded,\r\n    tab: state.progress.tab\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  switchContext\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Navigation);","/**\r\n * styleSpecDiff\r\n * \r\n * Enables the manipulation of a MapboxGL style sheet when it's kept in Redux.\r\n * \r\n * Copied more or less from mapbox-gl/src/style-spec/diff.js, following the lead of\r\n * this blog post: https://hackernoon.com/react-redux-with-mapbox-78fa3767211e. Also see\r\n * https://blog.mapbox.com/mapbox-gl-js-in-a-reactive-application-e08eecf0221b and \r\n * https://blog.mapbox.com/mapbox-gl-js-react-764da6cc074a.\r\n * \r\n * Note that we've swapped what was otherwise an import of a utility function buried in mapbox-gl\r\n * for a lodash function. Everything else is as-is\r\n */\r\n\r\n\r\nimport { isEqual } from 'lodash-es'\r\n\r\nconst operations = {\r\n\r\n    /*\r\n     * { command: 'setStyle', args: [stylesheet] }\r\n     */\r\n    setStyle: 'setStyle',\r\n\r\n    /*\r\n     * { command: 'addLayer', args: [layer, 'beforeLayerId'] }\r\n     */\r\n    addLayer: 'addLayer',\r\n\r\n    /*\r\n     * { command: 'removeLayer', args: ['layerId'] }\r\n     */\r\n    removeLayer: 'removeLayer',\r\n\r\n    /*\r\n     * { command: 'setPaintProperty', args: ['layerId', 'prop', value] }\r\n     */\r\n    setPaintProperty: 'setPaintProperty',\r\n\r\n    /*\r\n     * { command: 'setLayoutProperty', args: ['layerId', 'prop', value] }\r\n     */\r\n    setLayoutProperty: 'setLayoutProperty',\r\n\r\n    /*\r\n     * { command: 'setFilter', args: ['layerId', filter] }\r\n     */\r\n    setFilter: 'setFilter',\r\n\r\n    /*\r\n     * { command: 'addSource', args: ['sourceId', source] }\r\n     */\r\n    addSource: 'addSource',\r\n\r\n    /*\r\n     * { command: 'removeSource', args: ['sourceId'] }\r\n     */\r\n    removeSource: 'removeSource',\r\n\r\n    /*\r\n     * { command: 'setGeoJSONSourceData', args: ['sourceId', data] }\r\n     */\r\n    setGeoJSONSourceData: 'setGeoJSONSourceData',\r\n\r\n    /*\r\n     * { command: 'setLayerZoomRange', args: ['layerId', 0, 22] }\r\n     */\r\n    setLayerZoomRange: 'setLayerZoomRange',\r\n\r\n    /*\r\n     * { command: 'setLayerProperty', args: ['layerId', 'prop', value] }\r\n     */\r\n    setLayerProperty: 'setLayerProperty',\r\n\r\n    /*\r\n     * { command: 'setCenter', args: [[lon, lat]] }\r\n     */\r\n    setCenter: 'setCenter',\r\n\r\n    /*\r\n     * { command: 'setZoom', args: [zoom] }\r\n     */\r\n    setZoom: 'setZoom',\r\n\r\n    /*\r\n     * { command: 'setBearing', args: [bearing] }\r\n     */\r\n    setBearing: 'setBearing',\r\n\r\n    /*\r\n     * { command: 'setPitch', args: [pitch] }\r\n     */\r\n    setPitch: 'setPitch',\r\n\r\n    /*\r\n     * { command: 'setSprite', args: ['spriteUrl'] }\r\n     */\r\n    setSprite: 'setSprite',\r\n\r\n    /*\r\n     * { command: 'setGlyphs', args: ['glyphsUrl'] }\r\n     */\r\n    setGlyphs: 'setGlyphs',\r\n\r\n    /*\r\n     * { command: 'setTransition', args: [transition] }\r\n     */\r\n    setTransition: 'setTransition',\r\n\r\n    /*\r\n     * { command: 'setLighting', args: [lightProperties] }\r\n     */\r\n    setLight: 'setLight'\r\n\r\n};\r\n\r\nfunction addSource(sourceId, after, commands) {\r\n    commands.push({ command: operations.addSource, args: [sourceId, after[sourceId]] });\r\n}\r\n\r\nfunction removeSource(sourceId, commands, sourcesRemoved) {\r\n    commands.push({ command: operations.removeSource, args: [sourceId] });\r\n    sourcesRemoved[sourceId] = true;\r\n}\r\n\r\nfunction updateSource(sourceId, after, commands, sourcesRemoved) {\r\n    removeSource(sourceId, commands, sourcesRemoved);\r\n    addSource(sourceId, after, commands);\r\n}\r\n\r\nfunction canUpdateGeoJSON(before, after, sourceId) {\r\n    let prop;\r\n    for (prop in before[sourceId]) {\r\n        if (!before[sourceId].hasOwnProperty(prop)) continue;\r\n        if (prop !== 'data' && !isEqual(before[sourceId][prop], after[sourceId][prop])) {\r\n            return false;\r\n        }\r\n    }\r\n    for (prop in after[sourceId]) {\r\n        if (!after[sourceId].hasOwnProperty(prop)) continue;\r\n        if (prop !== 'data' && !isEqual(before[sourceId][prop], after[sourceId][prop])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction diffSources(before, after, commands, sourcesRemoved) {\r\n    before = before || {};\r\n    after = after || {};\r\n\r\n    let sourceId;\r\n\r\n    // look for sources to remove\r\n    for (sourceId in before) {\r\n        if (!before.hasOwnProperty(sourceId)) continue;\r\n        if (!after.hasOwnProperty(sourceId)) {\r\n            removeSource(sourceId, commands, sourcesRemoved);\r\n        }\r\n    }\r\n\r\n    // look for sources to add/update\r\n    for (sourceId in after) {\r\n        if (!after.hasOwnProperty(sourceId)) continue;\r\n        if (!before.hasOwnProperty(sourceId)) {\r\n            addSource(sourceId, after, commands);\r\n        } else if (!isEqual(before[sourceId], after[sourceId])) {\r\n            if (before[sourceId].type === 'geojson' && after[sourceId].type === 'geojson' && canUpdateGeoJSON(before, after, sourceId)) {\r\n                commands.push({ command: operations.setGeoJSONSourceData, args: [sourceId, after[sourceId].data] });\r\n            } else {\r\n                // no update command, must remove then add\r\n                updateSource(sourceId, after, commands, sourcesRemoved);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction diffLayerPropertyChanges(before, after, commands, layerId, klass, command) {\r\n    before = before || {};\r\n    after = after || {};\r\n\r\n    let prop;\r\n\r\n    for (prop in before) {\r\n        if (!before.hasOwnProperty(prop)) continue;\r\n        if (!isEqual(before[prop], after[prop])) {\r\n            commands.push({ command, args: [layerId, prop, after[prop], klass] });\r\n        }\r\n    }\r\n    for (prop in after) {\r\n        if (!after.hasOwnProperty(prop) || before.hasOwnProperty(prop)) continue;\r\n        if (!isEqual(before[prop], after[prop])) {\r\n            commands.push({ command, args: [layerId, prop, after[prop], klass] });\r\n        }\r\n    }\r\n}\r\n\r\nfunction pluckId(layer) {\r\n    return layer.id;\r\n}\r\nfunction indexById(group, layer) {\r\n    group[layer.id] = layer;\r\n    return group;\r\n}\r\n\r\nfunction diffLayers(before, after, commands) {\r\n    before = before || [];\r\n    after = after || [];\r\n\r\n    // order of layers by id\r\n    const beforeOrder = before.map(pluckId);\r\n    const afterOrder = after.map(pluckId);\r\n\r\n    // index of layer by id\r\n    const beforeIndex = before.reduce(indexById, {});\r\n    const afterIndex = after.reduce(indexById, {});\r\n\r\n    // track order of layers as if they have been mutated\r\n    const tracker = beforeOrder.slice();\r\n\r\n    // layers that have been added do not need to be diffed\r\n    const clean = Object.create(null);\r\n\r\n    let i, d, layerId, beforeLayer, afterLayer, insertBeforeLayerId, prop;\r\n\r\n    // remove layers\r\n    for (i = 0, d = 0; i < beforeOrder.length; i++) {\r\n        layerId = beforeOrder[i];\r\n        if (!afterIndex.hasOwnProperty(layerId)) {\r\n            commands.push({ command: operations.removeLayer, args: [layerId] });\r\n            tracker.splice(tracker.indexOf(layerId, d), 1);\r\n        } else {\r\n            // limit where in tracker we need to look for a match\r\n            d++;\r\n        }\r\n    }\r\n\r\n    // add/reorder layers\r\n    for (i = 0, d = 0; i < afterOrder.length; i++) {\r\n        // work backwards as insert is before an existing layer\r\n        layerId = afterOrder[afterOrder.length - 1 - i];\r\n\r\n        if (tracker[tracker.length - 1 - i] === layerId) continue;\r\n\r\n        if (beforeIndex.hasOwnProperty(layerId)) {\r\n            // remove the layer before we insert at the correct position\r\n            commands.push({ command: operations.removeLayer, args: [layerId] });\r\n            tracker.splice(tracker.lastIndexOf(layerId, tracker.length - d), 1);\r\n        } else {\r\n            // limit where in tracker we need to look for a match\r\n            d++;\r\n        }\r\n\r\n        // add layer at correct position\r\n        insertBeforeLayerId = tracker[tracker.length - i];\r\n        commands.push({ command: operations.addLayer, args: [afterIndex[layerId], insertBeforeLayerId] });\r\n        tracker.splice(tracker.length - i, 0, layerId);\r\n        clean[layerId] = true;\r\n    }\r\n\r\n    // update layers\r\n    for (i = 0; i < afterOrder.length; i++) {\r\n        layerId = afterOrder[i];\r\n        beforeLayer = beforeIndex[layerId];\r\n        afterLayer = afterIndex[layerId];\r\n\r\n        // no need to update if previously added (new or moved)\r\n        if (clean[layerId] || isEqual(beforeLayer, afterLayer)) continue;\r\n\r\n        // If source, source-layer, or type have changes, then remove the layer\r\n        // and add it back 'from scratch'.\r\n        if (!isEqual(beforeLayer.source, afterLayer.source) || !isEqual(beforeLayer['source-layer'], afterLayer['source-layer']) || !isEqual(beforeLayer.type, afterLayer.type)) {\r\n            commands.push({ command: operations.removeLayer, args: [layerId] });\r\n            // we add the layer back at the same position it was already in, so\r\n            // there's no need to update the `tracker`\r\n            insertBeforeLayerId = tracker[tracker.lastIndexOf(layerId) + 1];\r\n            commands.push({ command: operations.addLayer, args: [afterLayer, insertBeforeLayerId] });\r\n            continue;\r\n        }\r\n\r\n        // layout, paint, filter, minzoom, maxzoom\r\n        diffLayerPropertyChanges(beforeLayer.layout, afterLayer.layout, commands, layerId, null, operations.setLayoutProperty);\r\n        diffLayerPropertyChanges(beforeLayer.paint, afterLayer.paint, commands, layerId, null, operations.setPaintProperty);\r\n        if (!isEqual(beforeLayer.filter, afterLayer.filter)) {\r\n            commands.push({ command: operations.setFilter, args: [layerId, afterLayer.filter] });\r\n        }\r\n        if (!isEqual(beforeLayer.minzoom, afterLayer.minzoom) || !isEqual(beforeLayer.maxzoom, afterLayer.maxzoom)) {\r\n            commands.push({ command: operations.setLayerZoomRange, args: [layerId, afterLayer.minzoom, afterLayer.maxzoom] });\r\n        }\r\n\r\n        // handle all other layer props, including paint.*\r\n        for (prop in beforeLayer) {\r\n            if (!beforeLayer.hasOwnProperty(prop)) continue;\r\n            if (prop === 'layout' || prop === 'paint' || prop === 'filter' ||\r\n                prop === 'metadata' || prop === 'minzoom' || prop === 'maxzoom') continue;\r\n            if (prop.indexOf('paint.') === 0) {\r\n                diffLayerPropertyChanges(beforeLayer[prop], afterLayer[prop], commands, layerId, prop.slice(6), operations.setPaintProperty);\r\n            } else if (!isEqual(beforeLayer[prop], afterLayer[prop])) {\r\n                commands.push({ command: operations.setLayerProperty, args: [layerId, prop, afterLayer[prop]] });\r\n            }\r\n        }\r\n        for (prop in afterLayer) {\r\n            if (!afterLayer.hasOwnProperty(prop) || beforeLayer.hasOwnProperty(prop)) continue;\r\n            if (prop === 'layout' || prop === 'paint' || prop === 'filter' ||\r\n                prop === 'metadata' || prop === 'minzoom' || prop === 'maxzoom') continue;\r\n            if (prop.indexOf('paint.') === 0) {\r\n                diffLayerPropertyChanges(beforeLayer[prop], afterLayer[prop], commands, layerId, prop.slice(6), operations.setPaintProperty);\r\n            } else if (!isEqual(beforeLayer[prop], afterLayer[prop])) {\r\n                commands.push({ command: operations.setLayerProperty, args: [layerId, prop, afterLayer[prop]] });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Diff two stylesheet\r\n *\r\n * Creates semanticly aware diffs that can easily be applied at runtime.\r\n * Operations produced by the diff closely resemble the mapbox-gl-js API. Any\r\n * error creating the diff will fall back to the 'setStyle' operation.\r\n *\r\n * Example diff:\r\n * [\r\n *     { command: 'setConstant', args: ['@water', '#0000FF'] },\r\n *     { command: 'setPaintProperty', args: ['background', 'background-color', 'black'] }\r\n * ]\r\n *\r\n * @private\r\n * @param {*} [before] stylesheet to compare from\r\n * @param {*} after stylesheet to compare to\r\n * @returns Array list of changes\r\n */\r\nfunction diffStyles(before, after) {\r\n    if (!before) return [{ command: operations.setStyle, args: [after] }];\r\n\r\n    let commands = [];\r\n\r\n    try {\r\n        // Handle changes to top-level properties\r\n        if (!isEqual(before.version, after.version)) {\r\n            return [{ command: operations.setStyle, args: [after] }];\r\n        }\r\n        if (!isEqual(before.center, after.center)) {\r\n            commands.push({ command: operations.setCenter, args: [after.center] });\r\n        }\r\n        if (!isEqual(before.zoom, after.zoom)) {\r\n            commands.push({ command: operations.setZoom, args: [after.zoom] });\r\n        }\r\n        if (!isEqual(before.bearing, after.bearing)) {\r\n            commands.push({ command: operations.setBearing, args: [after.bearing] });\r\n        }\r\n        if (!isEqual(before.pitch, after.pitch)) {\r\n            commands.push({ command: operations.setPitch, args: [after.pitch] });\r\n        }\r\n        if (!isEqual(before.sprite, after.sprite)) {\r\n            commands.push({ command: operations.setSprite, args: [after.sprite] });\r\n        }\r\n        if (!isEqual(before.glyphs, after.glyphs)) {\r\n            commands.push({ command: operations.setGlyphs, args: [after.glyphs] });\r\n        }\r\n        if (!isEqual(before.transition, after.transition)) {\r\n            commands.push({ command: operations.setTransition, args: [after.transition] });\r\n        }\r\n        if (!isEqual(before.light, after.light)) {\r\n            commands.push({ command: operations.setLight, args: [after.light] });\r\n        }\r\n\r\n        // Handle changes to `sources`\r\n        // If a source is to be removed, we also--before the removeSource\r\n        // command--need to remove all the style layers that depend on it.\r\n        const sourcesRemoved = {};\r\n\r\n        // First collect the {add,remove}Source commands\r\n        const removeOrAddSourceCommands = [];\r\n        diffSources(before.sources, after.sources, removeOrAddSourceCommands, sourcesRemoved);\r\n\r\n        // Push a removeLayer command for each style layer that depends on a\r\n        // source that's being removed.\r\n        // Also, exclude any such layers them from the input to `diffLayers`\r\n        // below, so that diffLayers produces the appropriate `addLayers`\r\n        // command\r\n        const beforeLayers = [];\r\n        if (before.layers) {\r\n            before.layers.forEach((layer) => {\r\n                if (sourcesRemoved[layer.source]) {\r\n                    commands.push({ command: operations.removeLayer, args: [layer.id] });\r\n                } else {\r\n                    beforeLayers.push(layer);\r\n                }\r\n            });\r\n        }\r\n        commands = commands.concat(removeOrAddSourceCommands);\r\n\r\n        // Handle changes to `layers`\r\n        diffLayers(beforeLayers, after.layers, commands);\r\n\r\n    } catch (e) {\r\n        // fall back to setStyle\r\n        console.warn('Unable to compute style diff:', e);\r\n        commands = [{ command: operations.setStyle, args: [after] }];\r\n    }\r\n\r\n    return commands;\r\n}\r\n\r\nexport default diffStyles;\r\nexport { operations };\r\n","import { round } from 'lodash-es'\r\n\r\nexport const paddedRound = (v, d) => round(v, d).toFixed(d)\r\n\r\nexport const pluralize = (v, singular, plural) => {\r\n  return (v > 0) ? (\r\n    (v == 1) ? (\r\n      singular\r\n    ): (\r\n      plural\r\n    )\r\n  ) : (\r\n    plural\r\n  )\r\n}","import React from 'react';\r\nimport { ListGroup, Card } from 'react-bootstrap';\r\nimport { paddedRound } from '../../store/utils/index'\r\n\r\n// export default class Tooltip extends React.Component {\r\n//   render() {\r\nimport './tooltip.scss';\r\n\r\nexport const Tooltip = ({ features }) => {\r\n\r\n  const c = features.filter(f => f.id !== undefined).length\r\n\r\n  const renderFeature = (feature, i) => {\r\n    let p = feature.properties\r\n    // let d = JSON.parse(p.data)\r\n\r\n    return (\r\n      <ListGroup.Item key={i}>\r\n        <h6 className=\"tooltip-header\">{p.label}</h6>\r\n        \r\n        {(p.total !== \"\") ? (\r\n          <p className=\"tooltip-body\">Total rainfall: <strong>{paddedRound(p.total, 2)}</strong> inches</p>\r\n        ) : (\r\n          null\r\n        )}\r\n\r\n        {/* {(d.length > 0) ? (\r\n          d.map(r => (\r\n            <p className=\"small\">{r.ts} | {r.val} | {r.src}</p>\r\n          ))\r\n        ) : (\r\n          null\r\n        )} */}\r\n      </ListGroup.Item>\r\n    )\r\n  };\r\n\r\n  if (c > 0) {\r\n    return (\r\n      // <Card style={{ width: '250px' }}>\r\n      <Card>\r\n        <ListGroup variant=\"flush\">\r\n          {features.filter(f => f.id !== undefined).map(renderFeature)}\r\n        </ListGroup>\r\n      </Card>\r\n    )\r\n  } else {\r\n    return null\r\n  }\r\n}\r\n// }","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { Table, Row, Col, Form } from 'react-bootstrap'\r\nimport { isEmpty } from 'lodash-es'\r\nimport * as chroma from 'chroma-js'\r\n\r\nimport { symbolBinLookup, LEGEND_BREAKS } from '../../store/config'\r\nimport { applyColorStretch } from '../../store/actions'\r\n\r\n\r\nimport './legend.scss'\r\n\r\nclass MapLegend extends React.Component {\r\n\r\n  handleSelectLegend = e => {\r\n    this.props.dispatchPickLegend(e.currentTarget.value)\r\n    // console.log(e.currentTarget.value)\r\n  };\r\n\r\n  render() {\r\n    return (\r\n\r\n\r\n    <Row className=\"my-2\">\r\n        <Col sm={2}>\r\n          <Form>\r\n            <Form.Check custom size=\"sm\" value=\"breaks_005\" label=\"0.5\" name=\"legendRadios\" type=\"radio\" id=\"legend-radio-1\" onChange={this.handleSelectLegend}/>\r\n            <Form.Check defaultChecked custom size=\"sm\" value=\"breaks_050\" label=\"5\" name=\"legendRadios\" type=\"radio\" id=\"legend-radio-2\" onChange={this.handleSelectLegend}/>\r\n            <Form.Check custom size=\"sm\" value=\"breaks_100\" label=\"10\" name=\"legendRadios\" type=\"radio\" id=\"legend-radio-3\" onChange={this.handleSelectLegend}/>\r\n          </Form>\r\n      </Col>\r\n      <Col sm={10}>\r\n        <Table size=\"sm\">\r\n          <tbody>\r\n            <tr>\r\n              {this.props.bins.map((b, bi) => (\r\n                \r\n                <td \r\n                  key={bi}\r\n                  className=\"text-center legend-label\"\r\n                  style={{backgroundColor : `${b[1]}`}}\r\n                >\r\n                  <span \r\n                    style={{color : `${b[2]}`}}>\r\n                    {b[0]}\r\n                  </span> \r\n                </td>\r\n\r\n              ))}\r\n            </tr>\r\n          </tbody>\r\n        </Table>\r\n      </Col>\r\n\r\n    </Row>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n\r\n  let legendContent = !isEmpty(state.mapLegend) ? state.mapLegend : false\r\n\r\n  let bins = (legendContent) ? legendContent.content : []\r\n\r\n  // generate legend bins with labels and colors\r\n  // generate a font color based on luminance https://gka.github.io/chroma.js/#color-luminance\r\n  // e.g., if luminance < 0.5, color = white, else black\r\n  bins = bins.map((b, bi) => {\r\n\r\n    let c = \"#000\"\r\n    if (chroma(b[1]).luminance() < 0.4) {\r\n      c = \"#fff\"\r\n    }\r\n    return [b[0], b[1], c]\r\n  })\r\n\r\n  return {\r\n    bins: bins\r\n  };\r\n\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    dispatchPickLegend: payload => {\r\n      dispatch(\r\n        applyColorStretch({\r\n          breaks: LEGEND_BREAKS[payload]\r\n        })\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MapLegend);","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { connect } from 'react-redux';\r\nimport Immutable from 'immutable';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\r\nimport { isEmpty } from 'lodash-es';\r\n\r\nimport {\r\n  setStyle,\r\n  mapLoaded,\r\n  startThinking,\r\n  stopThinking\r\n} from '../../store/actions';\r\nimport { initDataFetch, pickSensorFromMap } from '../../store/middleware';\r\nimport { LAYERS_W_MOUSEOVER } from '../../store/config'\r\nimport diffStyles from '../../utilities/styleSpecDiff';\r\n\r\nimport { Tooltip } from './tooltip'\r\nimport MapLegend from './legend'\r\n\r\nimport 'mapbox-gl/dist/mapbox-gl.css'\r\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css'\r\nimport './map.scss'\r\n\r\nlet DEBUG = true\r\nconst MAPID = 'map'\r\nconst LAYERS_W_SELECT = LAYERS_W_MOUSEOVER.map(i => i[0])\r\n\r\nclass ReactMap extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      features: [],\r\n    };\r\n  }\r\n\r\n  tooltipContainer;\r\n\r\n  componentDidMount() {\r\n    this.props.loadingMap()\r\n    // create and load the map\r\n    this.loadMap()\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    // update the map if the style sheet has changed\r\n    this.updateMapStyle(nextProps.mapStyle)\r\n  }\r\n\r\n  setTooltip(features) {\r\n    if (features.length) {\r\n      ReactDOM.render(\r\n        React.createElement(\r\n          Tooltip, {\r\n          features\r\n        }\r\n        ),\r\n        this.tooltipContainer\r\n      );\r\n    } else {\r\n      ReactDOM.unmountComponentAtNode(this.tooltipContainer)\r\n    }\r\n  }\r\n\r\n  makeTooltipOnHover(e, tooltip) {\r\n    if (e === undefined) {\r\n      return\r\n    }\r\n    const layersToQuery = ['HOVER-pixel', 'HOVER-gauge']\r\n    // query tilesets with mouse hover\r\n    const features = this.webmap.queryRenderedFeatures(e.point, {\r\n      layers: layersToQuery\r\n    });\r\n    tooltip.setLngLat(e.lngLat);\r\n    this.webmap.getCanvas().style.cursor = features.length ? 'pointer' : '';\r\n    this.setTooltip(features);\r\n    this.setState({\r\n      features: features\r\n    })\r\n  }\r\n\r\n  /**\r\n   * run queryRenderedFeatures, using currentOverlays in redux store\r\n   */\r\n  handleMapClick(e) {\r\n    // set bbox as 5px reactangle area around clicked point\r\n    const bbox = [[e.point.x - 1, e.point.y - 1], [e.point.x + 1, e.point.y + 1]];\r\n\r\n    /**\r\n     * query rendered features\r\n     */\r\n    let features = this.webmap.queryRenderedFeatures(bbox, { layers: LAYERS_W_SELECT });\r\n    \r\n    // filter = ['in', 'id']\r\n    if (features.length > 0) {\r\n      features.forEach(f => {\r\n        console.log(f)\r\n        this.props.makeChoiceOnMapClick({ layerId: f.layer.id, ...f.properties })\r\n      })\r\n    }\r\n\r\n  }  \r\n\r\n\r\n  /**\r\n   * create the MapboxGL Map from our initial map state object in redux (initMap)\r\n   * and set the created map's style sheet into the redux (mapStyle)\r\n   */\r\n  loadMap() {\r\n\r\n    // set up the map\r\n    const mapConfig = {\r\n      container: MAPID,\r\n      style: this.props.initMap.mapboxSources[\"3rww-rainfall-base\"].url,\r\n      center: [this.props.initMap.longitude, this.props.initMap.latitude],\r\n      zoom: this.props.zoom,\r\n      attributionControl: false\r\n    }\r\n\r\n    mapboxgl.accessToken = this.props.token;\r\n    this.webmap = new mapboxgl.Map(mapConfig);\r\n\r\n    // setup the tooltip\r\n    // Container to put React generated content in.\r\n    this.tooltipContainer = document.createElement('div');\r\n    const tooltip = new mapboxgl.Marker(this.tooltipContainer, {\r\n      offset: [105, 0]\r\n    }).setLngLat([0, 0]).addTo(this.webmap);\r\n\r\n    this.webmap.on('load', () => {\r\n\r\n      // ----------------------------------------------\r\n      // CONTROLS\r\n\r\n      // add a geocoder for quick map searches\r\n      this.webmap.addControl(new MapboxGeocoder({\r\n        accessToken: mapboxgl.accessToken,\r\n        mapboxgl: mapboxgl,\r\n        placeholder: \"Fly me to...\",\r\n        marker: false,\r\n        collapsed: true,\r\n        clearAndBlurOnEsc: true,\r\n        clearOnBlur: true,\r\n        countries: 'us'\r\n      }));\r\n      // add the navigation control\r\n      this.webmap.addControl(new mapboxgl.NavigationControl());\r\n      // add the custom attribution control\r\n      this.webmap.addControl(new mapboxgl.AttributionControl({\r\n        compact: true,\r\n        customAttribution: this.props.initMap.attribution\r\n      }));\r\n\r\n      // ----------------------------------------------\r\n      // SOURCES AND LAYERS\r\n      // add sources and layers not in the hosted style but configured in the\r\n      // seed here:\r\n\r\n      // add sources here\r\n      this.props.initMap.sourcesToAdd.forEach(src => {\r\n        this.webmap.addSource(src.sourceName, src.sourceData)\r\n      })\r\n      // add the style layers here\r\n      this.props.initMap.layersToAdd.forEach(layer => {\r\n        layer.layerStyles.forEach(layerStyle => {\r\n          // insert the layer above this layer already in the style:\r\n          this.webmap.addLayer(layerStyle, layer.addLayerStylesAbove)\r\n        })\r\n      })\r\n\r\n      // ----------------------------------------------\r\n      // STYLE TO STORE\r\n\r\n      // Get the entire map stylesheet from the loaded map and put it in the \r\n      // mapStyle object state tree via (ulimtately) the setStyle action\r\n      let style = this.webmap.getStyle();\r\n      this.props.setStyle(style);\r\n\r\n      // console.log(\"map loaded\")\r\n      //dispatch the mapLoadded action\r\n      this.props.mapLoaded(this.webmap.loaded());\r\n\r\n      this.props.initFetchData()\r\n\r\n    });\r\n\r\n    // ----------------------------------------------\r\n    // BIND LAYER INTERACTIVITY MAP EVENTS TO ACTIONS\r\n\r\n    this.webmap.on('click', (e) => this.handleMapClick(e))\r\n\r\n    let hoveredStateId = {};\r\n\r\n    LAYERS_W_MOUSEOVER.forEach((lyrRef) => {\r\n      let lyrName = lyrRef[0]\r\n      let lyrSrc = lyrRef[1]\r\n\r\n      hoveredStateId[lyrName] = null;\r\n      // When the user moves their mouse over the HOVER-* layer, we'll update the\r\n      // feature state for the feature under the mouse.\r\n      this.webmap.on('mousemove', lyrName, (e) => {\r\n\r\n        this.makeTooltipOnHover(e, tooltip)\r\n\r\n        this.webmap.getCanvas().style.cursor = e.features.length ? 'pointer' : '';\r\n        if (e.features.length > 0) {\r\n          if (hoveredStateId[lyrName]) {\r\n            this.webmap.setFeatureState(\r\n              { source: lyrSrc, id: hoveredStateId[lyrName] },\r\n              { hover: false }\r\n            );\r\n          }\r\n          hoveredStateId[lyrName] = e.features[0].id;\r\n          this.webmap.setFeatureState(\r\n            { source: lyrSrc, id: hoveredStateId[lyrName] },\r\n            { hover: true }\r\n          );\r\n        }\r\n      });\r\n\r\n      // When the mouse leaves the HOVER-* layer, update the feature state of the\r\n      // previously hovered feature.\r\n      this.webmap.on('mouseleave', lyrName, (e) => {\r\n\r\n        this.makeTooltipOnHover(e, tooltip)\r\n\r\n        this.webmap.getCanvas().style.cursor = '';\r\n        if (hoveredStateId[lyrName]) {\r\n          this.webmap.setFeatureState(\r\n            { source: lyrSrc, id: hoveredStateId[lyrName] },\r\n            { hover: false }\r\n          );\r\n        }\r\n        hoveredStateId[lyrName] = null;\r\n      });\r\n\r\n    })\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * call this to update the map style. Utilizes Mapbox's diffStyles algorithm \r\n   * to turn differences between existing and next style sheets into mapbox\r\n   * expressions used to programmatically modify the stylesheet\r\n   */\r\n  updateMapStyle(nextPropsMapStyle) {\r\n\r\n    // if the mapStyles prop (passed in from redux) is null/empty, nothing\r\n    // to do here\r\n    if (this.props.mapStyle === null || isEmpty(this.props.mapStyle)) {\r\n      return\r\n    };\r\n\r\n    const thisMap = this.webmap;\r\n\r\n    // uses the stylesheets read into Immutable objects for the comparison\r\n\r\n    // 'oldStyle' is what we have in redux\r\n    const oldStyle = Immutable.fromJS(this.props.mapStyle);\r\n\r\n    // newStyle is what we've just received\r\n    const newStyle = Immutable.fromJS(nextPropsMapStyle);\r\n\r\n    // diffstyles crosswalks the difference in mapStyle to the types\r\n    // of mapboxGL map methods that would need to be executed to make the change.\r\n    if (!Immutable.is(oldStyle, newStyle)) {\r\n      // console.log(\"changes detected between old and new style\")\r\n      let changes = diffStyles(oldStyle.toJS(), newStyle.toJS());\r\n      if (DEBUG) { console.log(`updating mapStyle (${changes.map(c => c.command)})`) }\r\n\r\n      // if changes are detected, then we apply each one to the map\r\n      // this executes map methods to do things like pan, zoom, change layer\r\n      // visibility and filters, and CRUD data sources\r\n\r\n      changes.forEach((change) => {\r\n\r\n        // NOTE: this is a workaround for the setGeoJSONSourceData command,\r\n        // which was throwing an error when called. We simply do what it otherwise\r\n        // would have done to the style via the map's method.\r\n        if (change.command == \"setGeoJSONSourceData\") {\r\n          // thisMap.setGeoJSONSourceData.apply(thisMap, change.args)\r\n          // console.log(change.args)\r\n          let src = thisMap.getSource(change.args[0])\r\n          // console.log(src)\r\n          if (src) {\r\n            src.setData(change.args[1])\r\n          }\r\n        } else {\r\n          // console.log(thisMap)\r\n          // console.log(thisMap[change.command])\r\n          thisMap[change.command].apply(thisMap, change.args);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"map-and-legend-container\">\r\n        <div className=\"map\" id={MAPID}></div>\r\n        <div className=\"legend-container container-fluid\">\r\n          <MapLegend />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    mapStyle: state.mapStyle,\r\n    initMap: state.initMap,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    loadingMap: payload => {\r\n      dispatch(startThinking(\"Loading the map\"))\r\n    },\r\n    setStyle: payload => {\r\n      dispatch(setStyle(payload))\r\n    },\r\n    mapLoaded: payload => {\r\n      dispatch(mapLoaded(payload))\r\n      dispatch(stopThinking(\"Map loaded\"))\r\n    },\r\n    initFetchData: payload => {\r\n      return dispatch(initDataFetch(payload))\r\n    },\r\n    makeChoiceOnMapClick: payload => {\r\n      dispatch(pickSensorFromMap(payload))\r\n    },    \r\n  }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReactMap);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Row, Col, ListGroup, ProgressBar } from 'react-bootstrap';\r\nimport moment from 'moment'\r\n// icons\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n// import { faSpinner, faCloudRain } from '@fortawesome/free-solid-svg-icons'\r\n\r\n// import EventFilterControls from './filters';\r\n\r\nimport { pickRainfallEvent } from '../../store/actions'\r\nimport { selectRainfallEvents } from '../../store/selectors'\r\n\r\nimport './eventsList.scss'\r\n\r\n\r\nclass EventsList extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // This binding is necessary to make `this` work in the callback\r\n    this.handleListClick = this.handleListClick.bind(this);\r\n  }\r\n\r\n  handleListClick(e) {\r\n    this.props.dispatchPickRainfallEvent(e.eventid)\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n\r\n      <Row>\r\n        <Col>\r\n          <ListGroup variant=\"flush\">\r\n            {\r\n              this.props.events.map((e, i) => {\r\n\r\n                let dt0 = moment(e.startDt)\r\n                let dt1 = moment(e.endDt);\r\n                // let hasData = e.data.length > 0;\r\n                // let pct = (e.hours / this.props.maxHours) * 100\r\n                let pct = (e.hours / 48) * 100\r\n\r\n                return (\r\n                  <ListGroup.Item\r\n                    action\r\n                    onClick={() => this.handleListClick(e)}\r\n                    key={i}\r\n                    eventKey={e.eventid}\r\n                    // variant={hasData ? \"primary\" : \"\"}\r\n                    className=\"event-list-item\"\r\n                  >\r\n                    <small>\r\n                      <Row>\r\n                        <Col xs={7}>\r\n                          {dt0.format(\"DD MMM YYYY, h:mm a\")} &mdash; {dt1.format(\"DD MMM YYYY, h:mm a\")}&nbsp;\r\n                          </Col>\r\n                        <Col xs={5}>\r\n                          {e.hours} hour{(e.hours > 1) ? \"s\" : \"\"}\r\n                        </Col>\r\n                        {/* <Col xs={2}>\r\n                          {e.isFetching ? <FontAwesomeIcon icon={faSpinner} pulse/> : (\"\")}\r\n                          {hasData ? <FontAwesomeIcon icon={faCloudRain}/> : (\"\")}\r\n                          </Col> */}\r\n                      </Row>\r\n                    </small>\r\n                    <Row>\r\n                      <Col>\r\n                        <ProgressBar\r\n                          className=\"event-length-bar\"\r\n                          now={pct}\r\n                          // label={`${e.hours} hours`} \r\n                          variant=\"primary\"\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                  </ListGroup.Item>\r\n                )\r\n\r\n              })\r\n            }\r\n          </ListGroup>\r\n        </Col>\r\n      </Row>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  let events = selectRainfallEvents(state)\r\n  return {\r\n    events: events.list.filter(e => {\r\n      // return all events if filter is set to 24\r\n      if (events.filters.maxHours >= 24) {\r\n        return e\r\n        // otherwise use the filter\r\n      } else {\r\n        if (e.hours <= events.filters.maxHours) {\r\n          return e\r\n        }\r\n      }\r\n    }),\r\n    maxHours: parseFloat(events.stats.longest)\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    dispatchPickRainfallEvent: eventid => {\r\n      // console.log({ eventid: eventid, contextType: ownProps.contextType })\r\n      dispatch(pickRainfallEvent({ eventid: eventid, contextType: ownProps.contextType }))\r\n      // ownProps.handleClose()\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EventsList);","\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  Modal,\r\n  Button,\r\n  InputGroup,\r\n  FormControl,\r\n  Row,\r\n  Col,\r\n  Spinner\r\n} from 'react-bootstrap'\r\nimport moment from 'moment'\r\nimport DateRangePicker from 'react-bootstrap-daterangepicker';\r\n\r\n// icons\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCalendarAlt, faList } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport EventsList from './eventsList';\r\nimport PaginatedEventsList from './paginatedEventsList'\r\nimport { pickRainfallDateTimeRange } from '../../store/actions';\r\nimport {\r\n  selectEventStats, \r\n  selectFetchKwargs,\r\n  selectLatestlegacyGaugeTS,\r\n  selectLatestlegacyGarrTS\r\n} from '../../store/selectors'\r\nimport { RAINFALL_TYPES, RAINFALL_MIN_DATE } from '../../store/config'\r\n\r\nimport 'bootstrap-daterangepicker/daterangepicker.css';\r\nimport './datetimePicker.scss'\r\n\r\nclass DateTimePicker extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n\r\n    this.handleOnApply = this.handleOnApply.bind(this);\r\n    this.handleShow = this.handleShow.bind(this);\r\n    this.handleClose = this.handleClose.bind(this);\r\n\r\n    this.state = {\r\n      show: false\r\n    }\r\n\r\n  }\r\n\r\n  handleOnApply(e, p) {\r\n    this.props.dispatchPickRainfallDateTimeRange({\r\n      startDt: p.startDate.toISOString(),\r\n      endDt: p.endDate.toISOString()\r\n    })\r\n  }\r\n\r\n  handleClose(e) {\r\n    this.setState({ show: false });\r\n  }\r\n\r\n  handleShow(e) {\r\n    this.setState({ show: true });\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n\r\n        <Modal\r\n          show={this.state.show}\r\n          onHide={this.handleClose}\r\n          size=\"lg\"\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>\r\n              Select A Rainfall Event\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <EventsList \r\n              contextType={this.props.contextType}\r\n              handleClose={this.handleClose}\r\n            />\r\n            {/* <PaginatedEventsList/> */}\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={this.handleClose}>\r\n              Close\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n        <Row noGutters>\r\n          <Col ><strong>When</strong></Col>\r\n        </Row>\r\n        <Row noGutters>\r\n          <Col>\r\n\r\n            {(this.props.startDt !== false && this.props.endDt !== false) ? (\r\n\r\n              <InputGroup className=\"datetimepicker-control\">\r\n                <FormControl\r\n                  plaintext\r\n                  readOnly\r\n                  placeholder=\"start and end date/times\"\r\n                  value={`${this.props.startDt.format(\"MM/DD/YYYY hh:mm A\")} to ${this.props.endDt.format(\"MM/DD/YYYY hh:mm A\")}`}\r\n                  aria-label=\"start and end dates\"\r\n                  className=\"datetimepicker-control\"\r\n                />\r\n                <InputGroup.Append>\r\n                  {/* Button to show a datetime-range picker */}\r\n                  <DateRangePicker\r\n                    id={`dtp-show-daterangepicker-${this.props.rainfallDataType }`}\r\n                    startDate={this.props.startDt}\r\n                    endDate={this.props.endDt}\r\n                    // minDate={this.props.minDate}\r\n                    maxDate={this.props.maxDate}\r\n                    timePicker={true}\r\n                    timePickerIncrement={15}\r\n                    showDropdowns={false}\r\n                    // minYear={this.props.minYear}\r\n                    // maxYear={this.props.maxYear}\r\n                    ranges={this.props.ranges}\r\n                    alwaysShowCalendars={true}\r\n                    onApply={this.handleOnApply}\r\n                    // linkedCalendars={true}\r\n                  >\r\n                    <Button\r\n                      variant=\"light\"\r\n                      className=\"datetimepicker-control\"\r\n                    >\r\n                      <FontAwesomeIcon icon={faCalendarAlt} />\r\n                    </Button>\r\n                  </DateRangePicker>\r\n                  \r\n                  {(this.props.rainfallDataType === RAINFALL_TYPES.historic) ? (\r\n                  <Button\r\n                    id=\"dtp-show-eventlistmodal\"\r\n                    variant=\"light\"\r\n                    onClick={this.handleShow}\r\n                    className=\"datetimepicker-control\"\r\n                  >\r\n                    <FontAwesomeIcon icon={faList} />\r\n                  </Button>\r\n                  ) : (\r\n                    null\r\n                  )}\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n\r\n            ) : (\r\n                <Spinner\r\n                  animation=\"border\"\r\n                  variant=\"primary\"\r\n                  size=\"sm\"\r\n                >\r\n                  <span className=\"sr-only\">\"Fetching historic ranges...</span>\r\n                </Spinner>\r\n              )}\r\n\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state, ownProps) {\r\n  let currentKwargs = selectFetchKwargs(state, ownProps.contextType)\r\n\r\n  // calculate different available ranges, start, and endtimes, depending on rainfall data type\r\n  let startDt = moment(currentKwargs.startDt)\r\n  let endDt = moment(currentKwargs.endDt)\r\n  let maxDate = false\r\n  let ranges = {}\r\n  \r\n\r\n  if (ownProps.contextType === \"legacyGarr\") {\r\n    maxDate = selectLatestlegacyGarrTS(state)\r\n  } else if (ownProps.contextType === \"legacyGauge\") {\r\n    maxDate = selectLatestlegacyGaugeTS(state)\r\n  } else {\r\n    maxDate = moment().toISOString() // right now\r\n  }\r\n\r\n  if (ownProps.rainfallDataType === RAINFALL_TYPES.historic) {\r\n    ranges = {\r\n      \"Latest month\": [moment(maxDate).startOf('month'), moment(maxDate)],\r\n      \"Latest 3 months\": [moment(maxDate).subtract(2, 'month').startOf('month'), moment(maxDate)],\r\n      \"Latest 6 months\": [moment(maxDate).subtract(5, 'month').startOf('month'), moment(maxDate)],\r\n      \"Latest 12 months\": [moment(maxDate).subtract(11, 'month').startOf('month'), moment(maxDate)],\r\n      \"Latest Available This Year\": [moment(maxDate).startOf(\"year\"),  moment(maxDate)],\r\n      \"Last Year\": [\r\n        moment(maxDate).subtract(1, \"year\").startOf(\"year\"),\r\n        moment(maxDate).subtract(1, \"year\").endOf(\"year\")\r\n      ],\r\n    }\r\n  } else if (ownProps.rainfallDataType === RAINFALL_TYPES.realtime) {\r\n    let now = moment().toISOString()\r\n    ranges = {\r\n      \"Past 2 hours\": [moment(now).subtract(2, 'hour'), moment(now)],\r\n      \"Past 4 hours\": [moment(now).subtract(4, 'hour'), moment(now)],\r\n      \"Past 6 hours\": [moment(now).subtract(6, 'hour'), moment(now)],\r\n      \"Past 12 hours\": [moment(now).subtract(12, 'hour'), moment(now)],\r\n      \"Past 24 hours\": [moment(now).subtract(24, 'hour'), moment(now)],\r\n      \"Past 48 hours\": [moment(now).subtract(48, 'hour'), moment(now)],\r\n      \"Today\": [moment(now).startOf('day'), moment(now)],\r\n      \"Yesterday\": [moment(now).subtract(1, \"day\").startOf('day'), moment(now).subtract(1, \"day\").endOf('day')],\r\n      \"Past 3 days\": [moment(now).subtract(3, \"day\").startOf('day'), moment(now)],\r\n      \"Past 7 days\": [moment(now).subtract(7, \"day\").startOf('day'), moment(now)],\r\n      \"Past month\": [moment(now).subtract(1, \"month\").startOf('day'), moment(now)],\r\n      \"Past 3 months\": [moment(now).subtract(3, \"month\").startOf('month'), moment(now)],\r\n    }\r\n  } else {\r\n    maxDate = false\r\n    startDt = false\r\n    endDt = false\r\n    ranges = {}\r\n  }\r\n  \r\n  let p = {\r\n    local: { format: \"MM/DD/YYYY hh:mm A\" },\r\n    startDt: startDt,\r\n    endDt: endDt,\r\n    minDate: moment(RAINFALL_MIN_DATE),\r\n    maxDate: moment(maxDate),\r\n    minYear: moment(RAINFALL_MIN_DATE).year(),\r\n    maxYear: moment().year(),\r\n    ranges: ranges,\r\n    rainfallDataType: ownProps.rainfallDataType,\r\n  }\r\n  \r\n  return p\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    dispatchPickRainfallDateTimeRange: payload => {\r\n      dispatch(pickRainfallDateTimeRange({...payload, contextType: ownProps.contextType}))\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DateTimePicker);","import React, { useEffect, useState } from 'react';\r\nimport { Row, Col, ListGroup, ProgressBar } from 'react-bootstrap'\r\nimport axios from 'axios';\r\nimport { Pagination } from 'react-bootstrap'\r\nimport moment from 'moment'\r\n\r\nimport { EVENTS_API_URL } from '../../store/config'\r\n\r\nconst DataSource = axios.create({\r\n  baseURL: EVENTS_API_URL\r\n})\r\n\r\nconst PaginationWrapper = ({ postsPerPage, totalPosts, paginate }) => {\r\n  const pageNumbers = [];\r\n\r\n  for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  // return (\r\n  //   <nav>\r\n  //     <ul className=\"paginate\">\r\n  //       {pageNumbers.map((num) => (\r\n  //         <li key={num}>\r\n  //           <a onClick={() => paginate(num)} href='!#' >\r\n  //             {num}\r\n  //           </a>\r\n  //         </li>\r\n  //       ))}\r\n  //     </ul>\r\n  //   </nav>\r\n  // );\r\n  return (\r\n    <Pagination>\r\n      {pageNumbers}\r\n    </Pagination>\r\n  )\r\n};\r\n\r\nconst Posts = ({ posts, isLoading }) => {\r\n\r\n\r\n  if (isLoading) {\r\n    return <h2>Loading...</h2>;\r\n  }\r\n \r\n  return (\r\n\r\n    <Row>\r\n    <Col>\r\n      <ListGroup variant=\"flush\">\r\n        {\r\n          posts.map((e, i) => {\r\n\r\n            let dt0 = moment(e.startDt)\r\n            let dt1 = moment(e.endDt);\r\n            // let hasData = e.data.length > 0;\r\n            // let pct = (e.hours / this.props.maxHours) * 100\r\n            let pct = (e.hours / 48) * 100\r\n\r\n            return (\r\n              <ListGroup.Item\r\n                action\r\n                // onClick={() => this.handleListClick(e.eventid)}\r\n                key={i}\r\n                eventKey={e.eventid}\r\n                // variant={hasData ? \"primary\" : \"\"}\r\n                className=\"event-list-item\"\r\n              >\r\n                <small>\r\n                  <Row>\r\n                    <Col xs={7}>\r\n                      {dt0.format(\"DD MMM YYYY, h:mm a\")} &mdash; {dt1.format(\"DD MMM YYYY, h:mm a\")}&nbsp;\r\n                      </Col>\r\n                    <Col xs={5}>\r\n                      {e.hours} hour{(e.hours > 1) ? \"s\" : \"\"}\r\n                    </Col>\r\n                    {/* <Col xs={2}>\r\n                      {e.isFetching ? <FontAwesomeIcon icon={faSpinner} pulse/> : (\"\")}\r\n                      {hasData ? <FontAwesomeIcon icon={faCloudRain}/> : (\"\")}\r\n                      </Col> */}\r\n                  </Row>\r\n                </small>\r\n                <Row>\r\n                  <Col>\r\n                    <ProgressBar\r\n                      className=\"event-length-bar\"\r\n                      now={pct}\r\n                      // label={`${e.hours} hours`} \r\n                      variant=\"primary\"\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n            )\r\n\r\n          })\r\n        }\r\n      </ListGroup>\r\n    </Col>\r\n  </Row>\r\n\r\n    // <ul className='post-list'>\r\n    //   {posts.map(post => (\r\n    //     <li key={post.id}>\r\n    //       {post[\"report_label\"]}\r\n    //     </li>\r\n    //   ))}\r\n    // </ul>\r\n  );\r\n};\r\n\r\n\r\nconst PaginatedEventsList = (props) => {\r\n\r\n  const [posts, setPosts] = useState([]);\r\n  const [postCount, setPostCount] = useState(0);\r\n  const [nextPage, setNextPage] = useState(null);\r\n  const [prevPage, setPrevPage] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  const [postsPerPage] = useState(20);\r\n\r\n  useEffect(() => {\r\n    const fetchPosts = async () => {\r\n      setIsLoading(true);\r\n      const res = await DataSource.get();\r\n      setPosts(res.data.results);\r\n      setPostCount(res.data.count);\r\n      setPrevPage(res.data.previous)\r\n      setNextPage(res.data.next)\r\n      setIsLoading(false);\r\n    };\r\n\r\n    fetchPosts();\r\n  }, []);\r\n\r\n  const lastPost = currentPage * postsPerPage;\r\n  const firstPost = lastPost - postsPerPage;\r\n  const currentPosts = posts.slice(firstPost, lastPost);\r\n\r\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\r\n\r\n  return (\r\n    <div className=\"paginated-events-list\">\r\n      <div>\r\n        <Posts posts={currentPosts} loading={isLoading} />\r\n        <PaginationWrapper\r\n          postsPerPage={postsPerPage}\r\n          totalPosts={posts.length}\r\n          paginate={paginate}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n};\r\n\r\nexport default PaginatedEventsList","\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  Row,\r\n  Col,\r\n  Badge\r\n} from 'react-bootstrap'\r\n\r\nimport Select from 'react-select';\r\n\r\n// icons\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n// import { faCalendar, faList } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport {\r\n  selectMapStyleSourceDataFeatures,\r\n  selectPixelLookupsBasinsOnly,\r\n  selectPickedSensors,\r\n  selectContext\r\n} from '../../store/selectors'\r\nimport {\r\n  pickSensor\r\n} from '../../store/actions'\r\nimport {\r\n  pluralize\r\n} from '../../store/utils/index'\r\n\r\nimport { CONTEXT_TYPES } from '../../store/config'\r\n\r\n\r\nclass GeodataPicker extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n\r\n    this.handleOnApply = this.handleOnApply.bind(this);\r\n    this.handleShow = this.handleShow.bind(this);\r\n    this.handleClose = this.handleClose.bind(this);\r\n\r\n    this.state = {\r\n      show: false\r\n    }\r\n\r\n  }\r\n\r\n  handleSelectGauge = selectedGauges => {\r\n    this.props.dispatchPickSensorParam({\r\n      sensorLocationType: \"gauge\",\r\n      selectedOptions: selectedGauges // this is a list\r\n    })\r\n  };\r\n\r\n  handleSelectBasin = selectedBasin => {\r\n    this.props.dispatchPickSensorParam({\r\n      sensorLocationType: \"basin\",\r\n      selectedOptions: selectedBasin !== null ? [selectedBasin] : null // make this a list\r\n    })\r\n  };\r\n\r\n  handleOnApply() {\r\n    return;\r\n  }\r\n\r\n  handleClose(e) {\r\n    this.setState({ show: false });\r\n  }\r\n\r\n  handleShow(e) {\r\n    this.setState({ show: true });\r\n  }\r\n\r\n  render() {\r\n    // const { selectedGauges, selectedBasin } = this.state;\r\n    let gaugeCount = this.props.gaugeCount\r\n    let pixelCount = this.props.pixelCount\r\n    return (\r\n      <div>\r\n        <Row noGutters>\r\n          <Col>\r\n            <strong>Where</strong>\r\n          </Col>\r\n        </Row>\r\n\r\n        {(this.props.context !== CONTEXT_TYPES.legacyGarr) ? (\r\n        <Row noGutters>\r\n          <Col md={2}>\r\n            <small>Rain Gauges</small>\r\n          </Col>\r\n          <Col md={8}>\r\n            <Select\r\n              isMulti\r\n              value={this.props.selectedGauges}\r\n              onChange={this.handleSelectGauge}\r\n              options={this.props.raingaugeOpts}\r\n              menuPortalTarget={document.body}\r\n              isClearable\r\n            />\r\n          </Col>\r\n          <Col md={2}>\r\n            {(gaugeCount > 0) ? (\r\n              <span className=\"mx-1 my-1\"><Badge pill variant=\"primary\">\r\n                {`${gaugeCount} ${pluralize(gaugeCount, 'gauge', 'gauges')}`}\r\n              </Badge>\r\n              </span>\r\n            ) : (\r\n              null\r\n            )}\r\n          </Col>\r\n        </Row>\r\n        ):(\r\n          null\r\n        )}\r\n\r\n      {(this.props.context !== CONTEXT_TYPES.legacyGauge) ? (\r\n        <Row noGutters>\r\n          <Col md={2}>\r\n            <small>Radar Pixels</small>\r\n          </Col>\r\n          <Col md={8}>\r\n            <Select\r\n              value={this.props.selectedBasin}\r\n              onChange={this.handleSelectBasin}\r\n              options={this.props.basinOpts}\r\n              menuPortalTarget={document.body}\r\n              isClearable\r\n            />\r\n          </Col>\r\n          <Col md={2}>\r\n          {(pixelCount > 0) ? (\r\n              <span className=\"mx-1 my-1\"><Badge pill variant=\"primary\">\r\n                {`${pixelCount} ${pluralize(pixelCount, 'pixel', 'pixels')}`}\r\n              </Badge>\r\n              </span>\r\n            ) : (\r\n              null\r\n            )}\r\n          </Col>          \r\n        </Row>\r\n        ):(\r\n          null\r\n        )}\r\n\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state, ownProps) {\r\n  var selectedPixels = selectPickedSensors(state, ownProps.contextType, 'pixel')\r\n  var selectedRainGauges = selectPickedSensors(state, ownProps.contextType, 'gauge')\r\n\r\n  return {\r\n    raingaugeOpts: selectMapStyleSourceDataFeatures(state, 'gauge')\r\n      .map(i => ({ value: i.id, label: `${i.id}: ${i.properties.name}` })),\r\n    basinOpts: selectPixelLookupsBasinsOnly(state)\r\n      .map(i => ({ value: i.value, label: i.value })),\r\n    selectedBasin: selectPickedSensors(state, ownProps.contextType, 'basin'),\r\n    selectedRaingauges: selectedPixels,\r\n    selectedPixels: selectedPixels,\r\n    pixelCount: selectedPixels.length,\r\n    gaugeCount: selectedRainGauges.length,\r\n    context: selectContext(state)\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    dispatchPickSensorParam: payload => {\r\n      dispatch(pickSensor({...payload, contextType: ownProps.contextType}))\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GeodataPicker);","\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Form, Row, Col } from 'react-bootstrap'\r\n\r\nimport { pickInterval } from '../../store/actions'\r\nimport { INTERVAL_OPTIONS } from '../../store/config'\r\n\r\n\r\nclass IntervalPicker extends React.Component {\r\n\r\n  handleSelectInterval = e => {\r\n    this.props.dispatchPickInterval(e.currentTarget.value)\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Row noGutters>\r\n        <Col lg={3}>\r\n          <strong>Interval</strong>\r\n        </Col>\r\n        <Col lg={9}>\r\n          <Form>\r\n            {INTERVAL_OPTIONS.map((opt, i) => (\r\n              <Form.Check\r\n                defaultChecked={opt == \"Total\" ? true : false}\r\n                inline\r\n                // custom\r\n                key={`interval-${opt}-${i}-${this.props.rainfallDataType}`}\r\n                label={opt}\r\n                value={opt}\r\n                type=\"radio\"\r\n                id={`interval-${opt}-${this.props.rainfallDataType}`}\r\n                name=\"intervalRadios\"\r\n                onChange={this.handleSelectInterval}\r\n              />\r\n            ))}\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    dispatchPickInterval: payload => {\r\n      dispatch(pickInterval({ rollup: payload, contextType: ownProps.contextType }))\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(IntervalPicker);","import React from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport { HEADER_LABELS } from '../../store/config'\r\n\r\n/**\r\n* Table for Displaying Rainfall API results\r\n*/\r\nexport const ResultsTable = ({ rows, header }) => {  \r\n\r\n  // {\"gauge\":[{\"id\":\"8\",\"data\":[{\"val\":3.61,\"src\":\"G\",\"ts\":\"2020-07-22T17:15:00+00:00/2020-10-27T17:00:00+00:00\"}]}]}\r\n\r\n  // return (\r\n  //   <code>{JSON.stringify(results)}</code>\r\n  // )\r\n\r\n  return (\r\n    <Table responsive striped bordered hover size=\"sm\" className=\"download-table\">\r\n      <thead>\r\n      <tr className=\"download-table-header\">\r\n        {header.map((h, ih) => (\r\n        <th key={`h${ih}`}><small><em>{HEADER_LABELS[h]}</em></small></th>\r\n        ))}\r\n      </tr>\r\n      </thead>\r\n      <tbody>\r\n      {rows.map((r, ir) => (\r\n        <tr key={`r${ir}`}>\r\n        {header.map((h, ih) => (\r\n          <td key={`d${ir}${ih}`}><small>{r[h]}</small></td>)\r\n        )}\r\n        </tr>\r\n      ))}\r\n      </tbody> \r\n    </Table>\r\n  )\r\n\r\n}\r\n\r\n// const mapStateToProps = (state, ownProps) => {\r\n//  return {}\r\n// }\r\n\r\n// const mapDispatchToProps = (dispatch, ownProps) => {\r\n//  return {}\r\n// }\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ResultsTable);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Modal, Button, Row, Col } from 'react-bootstrap';\r\nimport moment from 'moment'\r\nimport { unparse } from 'papaparse'\r\nimport { saveAs } from 'file-saver'\r\nimport { keys } from 'lodash-es'\r\n\r\nimport { ResultsTable } from './resultsTable'\r\n\r\n/**\r\n* Modal for Individual Data Downloads\r\n*/\r\nclass DownloadModal extends React.Component {\r\n\r\n  constructor(props) {\r\n    super();\r\n    this.handleDownloadClick = this.handleDownloadClick.bind(this);\r\n  }\r\n\r\n  handleDownloadClick(e) {\r\n    e.preventDefault()\r\n    var blob = new Blob([this.props.csv], { type: \"application/csv\" });\r\n    saveAs(blob, \"rainfall.csv\", { autoBom: true })\r\n  }  \r\n\r\n  render() {\r\n\r\n    let fetchKwargs = this.props.fetchHistoryItem.fetchKwargs\r\n    let sensorLocations = fetchKwargs.sensorLocations\r\n    let gauges = sensorLocations.gauge\r\n    let pixels = sensorLocations.pixel\r\n\r\n    /*\r\n    // holders for data to be rendered in the download table\r\n    let data = []\r\n    let tableRows = []\r\n    let tableHeader = []\r\n    let downloadData = \"\"\r\n    \r\n    // table columns come from the checked state of the filters, with the ID/label columns first\r\n    let tableColumns = ['timestamp']\r\n\r\n    // transform the results into tabular format here:\r\n    // TODO\r\n    \r\n    \r\n    // read the array of objects into a delimited text string.\r\n    // this is what is sent via the File API\r\n    downloadData = unparse(data)\r\n\r\n    // convert back to object for rendering the table\r\n    let tableContent = parse(downloadData).data\r\n\r\n    // create the preview table\r\n    if (tableContent.length > 0) {\r\n      tableHeader = tableContent[0]\r\n      tableRows = tableContent.slice(1)\r\n    }\r\n    \r\n    \r\n    let content = {\r\n      header: tableHeader !== undefined ? tableHeader : [],\r\n      rows: tableRows !== undefined ? tableRows : [],\r\n      downloadData: downloadData\r\n    }\r\n    */\r\n\r\n    return (\r\n\r\n      <Modal\r\n        show={this.props.show}\r\n        onHide={this.props.onHide}\r\n        size=\"lg\"\r\n        dialogClassName=\"min-vw-95\"\r\n        animation={false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>\r\n            <Row>\r\n              <Col>\r\n                <h4>{moment(fetchKwargs.startDt).format(\"DD MMM YYYY, h:mm a\")} to {moment(fetchKwargs.endDt).format(\"DD MMM YYYY, h:mm a\")}</h4>\r\n                <hr></hr>\r\n              </Col>\r\n            </Row>\r\n            {/* List Gauges used in the request*/}\r\n            {(gauges.length > 0) ? (\r\n              <Row>\r\n                <Col md={3}>\r\n                  <small>Gauges:</small>\r\n                </Col>\r\n                <Col md={9}>\r\n                  <small>{gauges.map(g => g.label).join(\", \")}</small>\r\n                </Col>\r\n              </Row>\r\n            ) : (\r\n                null\r\n              )}\r\n\r\n            {/* List Pixels used in the request*/}\r\n            {(pixels.length > 0) ? (\r\n              <Row>\r\n                <Col md={3}>\r\n                  <small>Pixels:</small>\r\n                </Col>\r\n                <Col md={9}>\r\n                  <small>{pixels.length} pixels queried</small>\r\n                </Col>\r\n              </Row>\r\n            ) : (\r\n                null\r\n              )}\r\n\r\n            {/* Rollup method */}\r\n            <Row>\r\n              <Col md={3}>\r\n                <small>Interval:</small>\r\n              </Col>\r\n              <Col md={9}>\r\n                <small>{fetchKwargs.rollup}</small>\r\n              </Col>\r\n            </Row>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          {/* DOWNLOAD BUTTONS */}\r\n          <Row>\r\n            <Col sm={3}>\r\n              <p>Download as: </p>\r\n            </Col>\r\n            <Col sm={3}>\r\n              <Button block variant=\"outline-primary\" size={'sm'} onClick={this.handleDownloadClick}>\r\n                CSV\r\n              </Button>\r\n              {/* <Button block variant=\"outline-primary\" onClick={this.props.onHide}>\r\n                GeoJSON\r\n              </Button> */}\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <ResultsTable rows={this.props.rows} header={this.props.header}/>\r\n            </Col>\r\n          </Row>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"outline-secondary\" onClick={this.props.onHide}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n\r\n  let resultsTableData = ownProps.fetchHistoryItem.results\r\n  \r\n  let allRows = []\r\n  keys(resultsTableData).forEach(s => {\r\n    let sensorRows = resultsTableData[s]\r\n    sensorRows.forEach(sr => {\r\n      let rows = sr.data.map(srd => {\r\n        return { ...srd, id: sr.id, type: s}\r\n      })\r\n      allRows = allRows.concat(rows)\r\n    })\r\n  })\r\n  \r\n  return {\r\n    header: (allRows.length > 0 ? keys(allRows[0]) : []),\r\n    rows: (allRows.length > 0 ? allRows : []),\r\n    csv: (allRows.length > 0 ? unparse(allRows) : \"\"),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(DownloadModal);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Row, Col, Button, Card, Alert } from 'react-bootstrap';\r\nimport moment from 'moment'\r\nimport { includes } from 'lodash-es'\r\n\r\nimport DownloadModal from './downloadModal'\r\nimport { pickDownload } from '../../store/middleware'\r\n// import { reFetchRainfallDataFromApiV2 } from '../../store/middleware'\r\n\r\nimport './downloadItem.scss'\r\n\r\n/**\r\n* Downloads Item Component. \r\n*/\r\nclass DownloadsItem extends React.Component {\r\n\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.handleShow = this.handleShow.bind(this);\r\n    this.handleClose = this.handleClose.bind(this);\r\n    this.state = {\r\n      show: false\r\n    }\r\n  }\r\n\r\n  handleClose(e) {\r\n    // console.log(e)\r\n    this.setState({ show: false });\r\n  }\r\n\r\n  handleShow(e) {\r\n\r\n    this.setState({ show: true });\r\n    if (!this.props.fetchHistoryItem.isActive) {\r\n      console.log(e)\r\n      console.log(\"Loading data from\", this.props.fetchHistoryItem.requestId, \"to the map\")\r\n      this.props.dispatchPickDownload()\r\n    }\r\n\r\n  }\r\n\r\n  // handleDownloadClick() {\r\n  //   this.props.fetchRainfallData({\r\n  //     rainfallDataType: this.props.rainfallDataType,\r\n  //     contextType: this.props.contextType\r\n  //   })\r\n  // }\r\n\r\n  render() {\r\n    let fhi = this.props.fetchHistoryItem\r\n    let fetchKwargs = fhi.fetchKwargs\r\n    let sensorLocations = fetchKwargs.sensorLocations\r\n    let gauges = sensorLocations.gauge\r\n    let pixels = sensorLocations.pixel\r\n    let hasResults = fhi.results !== false\r\n    let pKwargs = fhi.processedKwargs\r\n    let failedJob = includes(['deferred', 'failed', \"does not exist\", 'error'], fhi.status)\r\n\r\n    // let reGetButton = includes(\r\n    //   ['deferred', 'failed', \"does not exist\", 'error'], \r\n    //   this.props.fetchHistoryItem.status\r\n    // )\r\n\r\n    return (\r\n      <div className=\"download-item-wrapper\">\r\n\r\n        {/* Datetime Range */}\r\n        <Row>\r\n          <Col sm={12}>\r\n            <Card.Title>{moment(fetchKwargs.startDt).format(\"DD MMM YYYY, h:mm a\")} to {moment(fetchKwargs.endDt).format(\"DD MMM YYYY, h:mm a\")}</Card.Title>\r\n            <hr></hr>\r\n          </Col>\r\n        </Row>\r\n\r\n\r\n        {/* List Gauges used in the request*/}\r\n        {(gauges.length > 0) ? (\r\n          <Row>\r\n            <Col lg={3}>\r\n              <p className=\"di-header\">Gauges:</p>\r\n            </Col>\r\n            <Col lg={9}>\r\n              <p>{gauges.map(g => g.label).join(\", \")}</p>\r\n            </Col>\r\n          </Row>\r\n        ) : (\r\n            null\r\n          )}\r\n\r\n        {/* List Pixels used in the request*/}\r\n        {(pixels.length > 0) ? (\r\n          <Row>\r\n            <Col lg={3}>\r\n              <p className=\"di-header\">Pixels:</p>\r\n            </Col>\r\n            <Col lg={9}>\r\n              <p>{pixels.length} pixels queried</p>\r\n            </Col>\r\n          </Row>\r\n        ) : (\r\n            null\r\n          )}\r\n\r\n        {/* Rollup method */}\r\n        <Row>\r\n          <Col lg={3}>\r\n            <p className=\"di-header\">Aggregation:</p>\r\n          </Col>\r\n          <Col lg={9}>\r\n            <p>{fetchKwargs.rollup}</p>\r\n          </Col>\r\n        </Row>\r\n\r\n        {(pKwargs === undefined) ? (\r\n          null\r\n        ) : (\r\n          <Row>\r\n            <Col lg={3}>\r\n              <p className=\"di-header\">Date/time range queried:</p>\r\n            </Col>\r\n            <Col lg={9}>\r\n              <p>{pKwargs.start_dt}/{pKwargs.end_dt}</p>\r\n            </Col>\r\n          </Row>\r\n        )}\r\n\r\n\r\n        {/* Download Buttons */}\r\n        {\r\n          hasResults ? (\r\n            <Row>\r\n              <Col>\r\n                <Button\r\n                  variant=\"outline-primary\"\r\n                  size=\"sm\"\r\n                  onClick={this.handleShow}\r\n                >\r\n                  View and Download Results Table\r\n                </Button>\r\n\r\n                {/* <ButtonToolbar aria-label=\"Download and Playback Toolbar\">\r\n              <ButtonGroup className=\"mr-2\" aria-label=\"First Group\">\r\n               <Button size=\"sm\">View & Download</Button>\r\n              </ButtonGroup>\r\n              <ButtonGroup aria-label=\"Third group\">\r\n              <Button>Play|Pause</Button>\r\n              <Button>Rewind</Button>\r\n             </ButtonGroup> \r\n             </ButtonToolbar> */}\r\n\r\n              </Col>\r\n            </Row>\r\n          ) : (null)\r\n          \r\n        }\r\n        {/* Error Alerts */}\r\n        {\r\n          failedJob ? (\r\n            fhi.messages.map((m, i) => <Alert dismissible key={i} variant=\"danger\"><small>{m}</small></Alert> )\r\n          ) : (\r\n            null\r\n          )\r\n        }\r\n\r\n        {/* {\r\n          reGetButton ? (\r\n            <Row>\r\n              <Col>\r\n                <Button\r\n                  variant=\"outline-primary\"\r\n                  size=\"sm\"\r\n                  onClick={this.handleShow}\r\n                >\r\n                  View and Download Results Table\r\n                </Button>\r\n              </Col>\r\n            </Row>            \r\n          ) : (null)\r\n        } */}\r\n\r\n        <DownloadModal\r\n          show={this.state.show}\r\n          onHide={this.handleClose}\r\n          fetchHistoryItem={this.props.fetchHistoryItem}\r\n        />\r\n\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    ...ownProps,\r\n\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    dispatchPickDownload: payload => {\r\n      let p = { ...ownProps.fetchHistoryItem, contextType: ownProps.contextType }\r\n      // console.log(p)\r\n      dispatch(pickDownload(p))\r\n    },\r\n    // dispatchDownloadAgain: payload => {\r\n    //   dispatch(reFetchRainfallDataFromApiV2(payload))\r\n    // }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DownloadsItem);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Row, Col, ListGroup, Spinner } from 'react-bootstrap';\r\nimport { includes } from 'lodash-es'\r\n\r\nimport DownloadItem from './downloadItem'\r\nimport { pickDownload } from '../../store/middleware'\r\nimport { selectFetchHistory } from '../../store/selectors'\r\n\r\nimport './downloadList.scss'\r\n\r\n/**\r\n* Downloads List Component. \r\n*/\r\nclass DownloadsList extends React.Component {\r\n\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    this.handleListClick = this.handleListClick.bind(this);\r\n  }\r\n\r\n  handleListClick(fh) {\r\n    this.props.pickDownload(fh)\r\n  }\r\n\r\n  render() {\r\n\r\n    console.log(this.props)\r\n\r\n    return (\r\n\r\n      <ListGroup variant=\"flush\">\r\n\r\n        {this.props.fetchHistory.slice(0).reverse().map((i, idx) => {\r\n\r\n          let failedJob = includes(['deferred', 'failed', \"does not exist\", 'error'], i.status)\r\n\r\n          let listColor\r\n          if (i.isActive && i.status === 'finished') {\r\n            listColor = \"primary\"\r\n          } else if (failedJob) {\r\n            listColor = \"danger\"\r\n          } else {\r\n            listColor = \"\"\r\n          }\r\n\r\n          return (\r\n            <ListGroup.Item\r\n              key={idx}\r\n              // active={i.isActive}\r\n              as=\"div\"\r\n              className=\"mx-0\"\r\n              action\r\n              onClick={() => this.handleListClick(i)}\r\n              variant={listColor}\r\n            >\r\n\r\n              <Row noGutters>\r\n                <Col sm={ i.isFetching ? (11) : (12) }>\r\n                  <DownloadItem\r\n                    fetchHistoryItem={i}\r\n                    contextType={this.props.contextType}\r\n                    rainfallDataType={this.props.rainfallDataType}\r\n                    rainfallSensorType={this.props.rainfallSensorType}\r\n                  />\r\n                </Col>\r\n                \r\n                  {\r\n                    i.isFetching ? (\r\n                      <Col sm={1}>\r\n                        <Spinner\r\n                          animation=\"border\"\r\n                          variant=\"primary\"\r\n                        >\r\n                          <span className=\"sr-only\">\r\n                            \"Fetching rainfall data...\r\n                          </span>\r\n                        </Spinner>\r\n                      </Col>\r\n                    ) : (null)\r\n                  }\r\n              </Row>\r\n              \r\n            </ListGroup.Item>\r\n          )\r\n        })}\r\n\r\n      </ListGroup>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  let fh = selectFetchHistory(state, ownProps.contextType)\r\n  return {\r\n    fetchHistory: fh,\r\n    hasDownloads: fh.length > 0,\r\n    rainfallDataType: ownProps.rainfallDataType\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    pickDownload: payload => {\r\n      dispatch(pickDownload({...payload, contextType: ownProps.contextType}))\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DownloadsList);","\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  Card,\r\n  Button,\r\n} from 'react-bootstrap'\r\nimport { isEmpty } from 'lodash-es'\r\n\r\nimport DateTimePicker from './datetimePicker';\r\nimport GeodataPicker from './geomPicker';\r\nimport IntervalPicker from './intervalPicker'\r\nimport DownloadsList from './downloadList'\r\n\r\nimport { fetchRainfallDataFromApiV2 } from '../../store/middleware'\r\nimport { selectSelectedSensors, selectFetchHistory } from '../../store/selectors'\r\n\r\nimport './downloader.scss'\r\n\r\n\r\nclass RainfallDownloader extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n    this.handleDownloadClick = this.handleDownloadClick.bind(this);\r\n  }\r\n\r\n  handleDownloadClick() {\r\n    this.props.fetchRainfallData({\r\n      rainfallDataType: this.props.rainfallDataType,\r\n      contextType: this.props.contextType\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Card>\r\n            <Card.Body>\r\n              <DateTimePicker\r\n                rainfallDataType={this.props.rainfallDataType}\r\n                contextType={this.props.contextType}\r\n              />\r\n              <hr></hr>\r\n              <GeodataPicker\r\n                rainfallDataType={this.props.rainfallDataType}\r\n                contextType={this.props.contextType}\r\n              />\r\n              <hr></hr>\r\n              <IntervalPicker\r\n                rainfallDataType={this.props.rainfallDataType}\r\n                contextType={this.props.contextType}\r\n              />\r\n              <hr></hr>\r\n              <Button\r\n                onClick={this.handleDownloadClick}\r\n                disabled={!this.props.hasKwargs}\r\n                block\r\n              >\r\n                Get Rainfall Data\r\n              </Button>\r\n            </Card.Body>\r\n        </Card>\r\n        <br></br>\r\n        {this.props.hasDownloads ? (\r\n        <Card>\r\n          <Card.Header>\r\n              Retrieved Rainfall Data\r\n          </Card.Header>\r\n          <DownloadsList \r\n            contextType={this.props.contextType}\r\n            rainfallDataType={this.props.rainfallDataType}\r\n          />\r\n        </Card>\r\n        ) : (null)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state, ownProps) {\r\n\r\n  let selectedSensors = selectSelectedSensors(state, ownProps.contextType)\r\n  let downloadHistory = selectFetchHistory(state, ownProps.contextType)\r\n\r\n  return {\r\n    hasKwargs: !isEmpty(selectedSensors), // if this is not empty, then we have kwargs\r\n    hasDownloads: downloadHistory.length > 0\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    fetchRainfallData: payload => {\r\n      dispatch(fetchRainfallDataFromApiV2(payload))\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RainfallDownloader);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { \r\n  Row, Col, Button, \r\n  // ButtonToolbar, ButtonGroup, \r\n  Popover, OverlayTrigger, \r\n  // ListGroup, Card \r\n} from 'react-bootstrap';\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n// import { faPlay, faPause, faStop, faMap, faHandPointer } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport '../../layout.scss';\r\n\r\n\r\nconst popover = (\r\n  <Popover id=\"popover-basic\">\r\n    <Popover.Title as=\"h3\">Provisional Data Disclaimer</Popover.Title>\r\n    <Popover.Content>\r\n      Data shown here are provisional and subject to revision until they have been thoroughly reviewed and received final approval. Current condition data relayed by satellite or other telemetry are automatically screened to not display improbable values until they can be verified. Provisional data may be inaccurate due to instrument malfunctions or physical changes at the measurement site. Subsequent review based on field inspections and measurements may result in significant revisions to the data. Data users are cautioned to consider carefully the provisional nature of the information before using it for decisions that concern personal or public safety or the conduct of business that involves substantial monetary or operational consequences. Information concerning the accuracy and appropriate uses of these data or concerning other hydrologic data may be obtained from the 3RWW.\r\n    </Popover.Content>\r\n  </Popover>\r\n);\r\n\r\nexport default class LegacyRealtimeRainfallPage extends React.Component {\r\n\r\n  render() {\r\n\r\n    return (\r\n\r\n      <Row>\r\n        <Col>\r\n          <h1 className=\"data-type-header\">Real-time Rainfall</h1>\r\n          <p>Real-time, provisional rainfall measurements are available from the rain gauge network and NEXRAD radar. This data is updated every 15 minutes.\r\n            <small className=\"my-3\">\r\n              <OverlayTrigger trigger=\"click\" placement=\"bottom\" overlay={popover}>\r\n                <Button variant=\"light\" size=\"sm\">Provisional Data Disclaimer</Button>\r\n              </OverlayTrigger>\r\n            </small>\r\n          </p>\r\n\r\n          {/* <br></br>\r\n          <Card>\r\n            <Card.Header as=\"h2\">Map Provisional Data</Card.Header>\r\n            <ListGroup variant=\"flush\">\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col lg={3}>\r\n                    <h3>Recent Rainfall</h3>\r\n                  </Col>\r\n                  <Col>\r\n                    <p>Click <FontAwesomeIcon icon={faHandPointer} /> on a pixel or gauge on the map <FontAwesomeIcon icon={faMap} /> to see the last 12 hours of rainfall data.</p>\r\n                    <p>For an animated view of rainfall in 15-minute increments, click here:</p>\r\n                    <ButtonToolbar aria-label=\"Recent Rainfall Animation Controls\">\r\n                      <ButtonGroup aria-label=\"Available Time Loops\" className=\"mr-2\">\r\n                        <Button variant=\"light\" size=\"sm\">2-Hour Loop</Button>\r\n                        <Button variant=\"light\" size=\"sm\">4-Hour Loop</Button>\r\n                        <Button variant=\"light\" size=\"sm\">6-Hour Loop</Button>\r\n                      </ButtonGroup>\r\n                      <ButtonGroup aria-label=\"Animation Controls\">\r\n                        <Button variant=\"light\" size=\"sm\">\r\n                          <FontAwesomeIcon icon={faPlay} />\r\n                        </Button>\r\n                        <Button variant=\"light\" size=\"sm\">\r\n                          <FontAwesomeIcon icon={faStop} />\r\n                        </Button>\r\n                      </ButtonGroup>\r\n                    </ButtonToolbar>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col lg={3}>\r\n                    <h3>Cumulative Rainfall</h3>\r\n                  </Col>\r\n                  <Col>\r\n                    <p>Show cumulative rainfall on the map for</p>\r\n                    <ButtonToolbar aria-label=\"Recent Rainfall Animation Controls\">\r\n                      <ButtonGroup aria-label=\"Available Time Loops (1)\" className=\"mr-2\">\r\n                        <Button size=\"sm\" variant=\"light\">last 24 hours</Button>\r\n                        <Button size=\"sm\" variant=\"light\">last 48 hours</Button>\r\n                      </ButtonGroup>\r\n                      <br></br>\r\n                      <ButtonGroup aria-label=\"Available Time Loops (2)\" className=\"mr-2\">\r\n                        <Button size=\"sm\" variant=\"light\">last 7 days</Button>\r\n                        <Button size=\"sm\" variant=\"light\">last 30 days</Button>\r\n                      </ButtonGroup>\r\n                      <br></br>\r\n                      <ButtonGroup aria-label=\"Available Time Loops (3)\" className=\"mr-2\">\r\n                        <Button size=\"sm\" variant=\"light\">this month to-date</Button>\r\n                        <Button size=\"sm\" variant=\"light\">last month</Button>\r\n                      </ButtonGroup>\r\n                    </ButtonToolbar>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Card>\r\n          <br></br>\r\n          <h2>Download Provisional Data</h2>\r\n          <p>Download provisional rainfall data captured from the gauges or radar pixels over the last 30-60 days:</p> */}\r\n        </Col>\r\n      </Row>\r\n\r\n    )\r\n\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n// import Spinner from 'react-bootstrap/Spinner';\r\n// icons\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSpinner, faCloudRain } from '@fortawesome/free-solid-svg-icons'\r\nimport './thinkingOverlay.scss'\r\n\r\nclass ThinkingOverlay extends React.Component {\r\n\r\n  render() {\r\n    if (this.props.isAppThinking) {\r\n      return (\r\n        <div className=\"thinking-overlay\">\r\n          <div className=\"d-flex thinking-content\">\r\n            {/* <div className=\"d-flex justify-content-center my-auto\"> */}\r\n            <span className=\"fa-layers fa-fw\">\r\n                <FontAwesomeIcon icon={faSpinner} pulse size=\"8x\"/>\r\n                <FontAwesomeIcon icon={faCloudRain} size=\"4x\" transform=\"right-8\"/>\r\n              </span>\r\n              \r\n            {/* <Spinner\r\n              animation=\"grow\"\r\n              variant=\"primary\"\r\n              className=\"thinking-spinner\"\r\n            >\r\n              <span className=\"sr-only\">\"Loading...</span>\r\n            </Spinner> */}\r\n          </div>\r\n          <p className=\"debug-messages\">{this.props.message}</p>\r\n        </div>\r\n      )\r\n    } else {\r\n      return (null)\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  let msgs = state.progress.messages\r\n  return { \r\n    isAppThinking: state.progress.isThinking > 0,\r\n    message: msgs[msgs.length - 1]\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ThinkingOverlay)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Row, Col, Container, TabContent, TabPane, Alert} from 'react-bootstrap';\r\n\r\nimport ReactMap from './map/map';\r\nimport RainfallDownloader from './sidebar/downloader'\r\nimport LegacyRealtimeRainfallPage from './sidebar/legacy/legacyRealtime'\r\nimport ThinkingOverlay from './thinking/thinkingOverlay'\r\n\r\nimport { RAINFALL_TYPES, CONTEXT_TYPES, SENSOR_TYPES } from '../store/config'\r\nimport { switchContext } from '../store/middleware'\r\n\r\nimport './layout.scss'\r\n\r\n/**\r\n* Layout Component. Everything on the page under the Nav: Controls and Map.\r\n*/\r\nclass Layout extends React.Component {\r\n  render() {\r\n\r\n    return (\r\n\r\n      <div className=\"fill no-gutters\">\r\n\r\n        <ThinkingOverlay />\r\n\r\n        <Row>\r\n          <Col>\r\n            {/* <ProgressBar /> */}\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row className=\"fill no-gutters\">\r\n\r\n        <Col sm={7} className=\"map-column\">\r\n            <ReactMap\r\n              token={this.props.token}\r\n              styleUrl={this.props.styleId}\r\n              latitude={this.props.latitude}\r\n              longitude={this.props.longitude}\r\n              zoom={this.props.zoom}\r\n            />\r\n          </Col>\r\n\r\n          <Col sm={5} className=\"sidebar-column\">\r\n            <Container className=\"sidebar mt-3\">\r\n              {/* <TabContainer\r\n                defaultActiveKey={CONTEXT_TYPES.legacyRealtime}\r\n                id=\"rainfall-data-type-tabs\"\r\n                mountOnEnter={true}\r\n                onSelect={this.props.switchContext}\r\n              > */}\r\n                <TabContent>\r\n                  <TabPane\r\n                    active={this.props.tab === CONTEXT_TYPES.legacyRealtime} \r\n                    eventKey={CONTEXT_TYPES.legacyRealtime} \r\n                    title=\"Real-Time Rainfall\"\r\n                  >\r\n                    <LegacyRealtimeRainfallPage/>\r\n                    <RainfallDownloader\r\n                      contextType={CONTEXT_TYPES.legacyRealtime} \r\n                      rainfallDataType={RAINFALL_TYPES.realtime}\r\n                      rainfallSensorTypes={[SENSOR_TYPES.gauge, SENSOR_TYPES.pixel]}\r\n                    />\r\n                  </TabPane>\r\n                  <TabPane \r\n                    active={this.props.tab === CONTEXT_TYPES.legacyGauge} \r\n                    eventKey={CONTEXT_TYPES.legacyGauge} \r\n                    title=\"Historical Rain Gauge\"\r\n                  >\r\n                    <h1 className=\"data-type-header\">Historical Rain Gauge Data</h1>\r\n                    <p>Historic rain gauge data has been through a QA/QC process with ALCOSAN and 3RWW in which any data errors caused by the gauge hardware have been addressed.</p>\r\n                    <RainfallDownloader \r\n                      contextType={CONTEXT_TYPES.legacyGauge} \r\n                      rainfallDataType={RAINFALL_TYPES.historic}\r\n                      rainfallSensorTypes={[SENSOR_TYPES.gauge]}\r\n                    />\r\n                  </TabPane>\r\n                  <TabPane \r\n                    active={this.props.tab === CONTEXT_TYPES.legacyGarr} \r\n                    eventKey={CONTEXT_TYPES.legacyGarr}\r\n                    title=\"Calibrated Radar Rainfall\"\r\n                  >\r\n                    <h1 className=\"data-type-header\">Calibrated Radar Rainfall</h1>\r\n                    <p>Calibrated radar rainfall data is NEXRAD radar rainfall data adjusted using our rain gauge network. Calibration is performed by <a href=\"https://www.vieuxinc.com/\" target=\"_blank\">Vieux Associates</a>.</p>\r\n                    <Alert variant='warning'>\r\n                      <strong>Please note:</strong> We are currently migrating historic calibrated radar rainfall data to a new database; consequently you may find that rainfall data downloaded here for dates prior to July 2020 will be incomplete.\r\n                      </Alert>\r\n                    <RainfallDownloader \r\n                      contextType={CONTEXT_TYPES.legacyGarr} \r\n                      rainfallDataType={RAINFALL_TYPES.historic}\r\n                      rainfallSensorTypes={[SENSOR_TYPES.pixel]}\r\n                    />\r\n                  </TabPane>\r\n              </TabContent>\r\n              {/* </TabContainer> */}\r\n            </Container>\r\n          </Col>\r\n\r\n\r\n        </Row>\r\n      </div>\r\n      // </Container>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return { \r\n    ...state.initMap, \r\n    tab: state.progress.tab \r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  switchContext\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout);","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport {TabContainer} from 'react-bootstrap';\r\nimport Navigation from './components/navigation/navigation';\r\nimport Layout from './components/layout';\r\nimport { CONTEXT_TYPES } from './store/config'\r\nimport { switchContext } from './store/middleware'\r\n\r\nclass App extends React.Component {\r\n\r\n  // componentDidMount() {\r\n\r\n  //   // initial data fetches, including\r\n  //   // * events\r\n  //   // * pixels\r\n  //   // * gauges\r\n  //   this.props.initFetchData()\r\n\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n\r\n      <div style={{ height: 100 + '%' }}>\r\n        <TabContainer\r\n          defaultActiveKey={CONTEXT_TYPES.legacyRealtime}\r\n          id=\"rainfall-tabs\"\r\n          // mountOnEnter={true}\r\n          onSelect={this.props.switchContext}\r\n        >\r\n          <Navigation isloading={this.props.loading}/>\r\n          <Layout />\r\n        </TabContainer>\r\n      </div>\r\n\r\n    );\r\n  }\r\n\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return { ...state.initMap }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    switchContext: payload => {\r\n      console.log(\"switching\", payload)\r\n      dispatch(switchContext(payload))\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'babel-polyfill'\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// react-redux and the store\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store/index\";\r\n// custom style sheets\r\nimport './brand.scss';\r\nimport './index.scss';\r\n// core application code\r\nimport App from './App';\r\n// service worker\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconsole.log(\"Hello there curious person! The 3RWW Rainfall API is located at\", process.env.REACT_APP_API_URL_ROOT, \"- check it out for more powerful querying capability!\")\r\n\r\n// entrypoint for the react app\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, \r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}